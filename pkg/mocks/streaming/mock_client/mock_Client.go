// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_client

import (
	context "context"

	client "github.com/milvus-io/milvus/pkg/v2/streaming/client"

	message "github.com/milvus-io/milvus/pkg/v2/streaming/util/message"

	mock "github.com/stretchr/testify/mock"

	types "github.com/milvus-io/milvus/pkg/v2/streaming/util/types"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AppendMessages provides a mock function with given fields: ctx, msgs
func (_m *MockClient) AppendMessages(ctx context.Context, msgs ...message.MutableMessage) types.AppendResponses {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AppendMessages")
	}

	var r0 types.AppendResponses
	if rf, ok := ret.Get(0).(func(context.Context, ...message.MutableMessage) types.AppendResponses); ok {
		r0 = rf(ctx, msgs...)
	} else {
		r0 = ret.Get(0).(types.AppendResponses)
	}

	return r0
}

// MockClient_AppendMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendMessages'
type MockClient_AppendMessages_Call struct {
	*mock.Call
}

// AppendMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs ...message.MutableMessage
func (_e *MockClient_Expecter) AppendMessages(ctx interface{}, msgs ...interface{}) *MockClient_AppendMessages_Call {
	return &MockClient_AppendMessages_Call{Call: _e.mock.On("AppendMessages",
		append([]interface{}{ctx}, msgs...)...)}
}

func (_c *MockClient_AppendMessages_Call) Run(run func(ctx context.Context, msgs ...message.MutableMessage)) *MockClient_AppendMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]message.MutableMessage, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(message.MutableMessage)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_AppendMessages_Call) Return(_a0 types.AppendResponses) *MockClient_AppendMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_AppendMessages_Call) RunAndReturn(run func(context.Context, ...message.MutableMessage) types.AppendResponses) *MockClient_AppendMessages_Call {
	_c.Call.Return(run)
	return _c
}

// AppendMessagesWithOption provides a mock function with given fields: ctx, opts, msgs
func (_m *MockClient) AppendMessagesWithOption(ctx context.Context, opts client.AppendOption, msgs ...message.MutableMessage) types.AppendResponses {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AppendMessagesWithOption")
	}

	var r0 types.AppendResponses
	if rf, ok := ret.Get(0).(func(context.Context, client.AppendOption, ...message.MutableMessage) types.AppendResponses); ok {
		r0 = rf(ctx, opts, msgs...)
	} else {
		r0 = ret.Get(0).(types.AppendResponses)
	}

	return r0
}

// MockClient_AppendMessagesWithOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendMessagesWithOption'
type MockClient_AppendMessagesWithOption_Call struct {
	*mock.Call
}

// AppendMessagesWithOption is a helper method to define mock.On call
//   - ctx context.Context
//   - opts client.AppendOption
//   - msgs ...message.MutableMessage
func (_e *MockClient_Expecter) AppendMessagesWithOption(ctx interface{}, opts interface{}, msgs ...interface{}) *MockClient_AppendMessagesWithOption_Call {
	return &MockClient_AppendMessagesWithOption_Call{Call: _e.mock.On("AppendMessagesWithOption",
		append([]interface{}{ctx, opts}, msgs...)...)}
}

func (_c *MockClient_AppendMessagesWithOption_Call) Run(run func(ctx context.Context, opts client.AppendOption, msgs ...message.MutableMessage)) *MockClient_AppendMessagesWithOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]message.MutableMessage, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(message.MutableMessage)
			}
		}
		run(args[0].(context.Context), args[1].(client.AppendOption), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_AppendMessagesWithOption_Call) Return(_a0 types.AppendResponses) *MockClient_AppendMessagesWithOption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_AppendMessagesWithOption_Call) RunAndReturn(run func(context.Context, client.AppendOption, ...message.MutableMessage) types.AppendResponses) *MockClient_AppendMessagesWithOption_Call {
	_c.Call.Return(run)
	return _c
}

// Broadcast provides a mock function with no fields
func (_m *MockClient) Broadcast() client.Broadcast {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Broadcast")
	}

	var r0 client.Broadcast
	if rf, ok := ret.Get(0).(func() client.Broadcast); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Broadcast)
		}
	}

	return r0
}

// MockClient_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type MockClient_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
func (_e *MockClient_Expecter) Broadcast() *MockClient_Broadcast_Call {
	return &MockClient_Broadcast_Call{Call: _e.mock.On("Broadcast")}
}

func (_c *MockClient_Broadcast_Call) Run(run func()) *MockClient_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Broadcast_Call) Return(_a0 client.Broadcast) *MockClient_Broadcast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Broadcast_Call) RunAndReturn(run func() client.Broadcast) *MockClient_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockClient) Close() {
	_m.Called()
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClient_Expecter) Close() *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClient_Close_Call) Run(run func()) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Close_Call) Return() *MockClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_Close_Call) RunAndReturn(run func()) *MockClient_Close_Call {
	_c.Run(run)
	return _c
}

// Local provides a mock function with no fields
func (_m *MockClient) Local() client.Local {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Local")
	}

	var r0 client.Local
	if rf, ok := ret.Get(0).(func() client.Local); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Local)
		}
	}

	return r0
}

// MockClient_Local_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Local'
type MockClient_Local_Call struct {
	*mock.Call
}

// Local is a helper method to define mock.On call
func (_e *MockClient_Expecter) Local() *MockClient_Local_Call {
	return &MockClient_Local_Call{Call: _e.mock.On("Local")}
}

func (_c *MockClient_Local_Call) Run(run func()) *MockClient_Local_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Local_Call) Return(_a0 client.Local) *MockClient_Local_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Local_Call) RunAndReturn(run func() client.Local) *MockClient_Local_Call {
	_c.Call.Return(run)
	return _c
}

// RawAppend provides a mock function with given fields: ctx, msgs, opts
func (_m *MockClient) RawAppend(ctx context.Context, msgs message.MutableMessage, opts ...client.AppendOption) (*types.AppendResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msgs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RawAppend")
	}

	var r0 *types.AppendResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, message.MutableMessage, ...client.AppendOption) (*types.AppendResult, error)); ok {
		return rf(ctx, msgs, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, message.MutableMessage, ...client.AppendOption) *types.AppendResult); ok {
		r0 = rf(ctx, msgs, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AppendResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, message.MutableMessage, ...client.AppendOption) error); ok {
		r1 = rf(ctx, msgs, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_RawAppend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawAppend'
type MockClient_RawAppend_Call struct {
	*mock.Call
}

// RawAppend is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs message.MutableMessage
//   - opts ...client.AppendOption
func (_e *MockClient_Expecter) RawAppend(ctx interface{}, msgs interface{}, opts ...interface{}) *MockClient_RawAppend_Call {
	return &MockClient_RawAppend_Call{Call: _e.mock.On("RawAppend",
		append([]interface{}{ctx, msgs}, opts...)...)}
}

func (_c *MockClient_RawAppend_Call) Run(run func(ctx context.Context, msgs message.MutableMessage, opts ...client.AppendOption)) *MockClient_RawAppend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.AppendOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.AppendOption)
			}
		}
		run(args[0].(context.Context), args[1].(message.MutableMessage), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_RawAppend_Call) Return(_a0 *types.AppendResult, _a1 error) *MockClient_RawAppend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_RawAppend_Call) RunAndReturn(run func(context.Context, message.MutableMessage, ...client.AppendOption) (*types.AppendResult, error)) *MockClient_RawAppend_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, opts
func (_m *MockClient) Read(ctx context.Context, opts client.ReadOption) client.Scanner {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 client.Scanner
	if rf, ok := ret.Get(0).(func(context.Context, client.ReadOption) client.Scanner); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Scanner)
		}
	}

	return r0
}

// MockClient_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockClient_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - opts client.ReadOption
func (_e *MockClient_Expecter) Read(ctx interface{}, opts interface{}) *MockClient_Read_Call {
	return &MockClient_Read_Call{Call: _e.mock.On("Read", ctx, opts)}
}

func (_c *MockClient_Read_Call) Run(run func(ctx context.Context, opts client.ReadOption)) *MockClient_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ReadOption))
	})
	return _c
}

func (_c *MockClient_Read_Call) Return(_a0 client.Scanner) *MockClient_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Read_Call) RunAndReturn(run func(context.Context, client.ReadOption) client.Scanner) *MockClient_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Txn provides a mock function with given fields: ctx, opts
func (_m *MockClient) Txn(ctx context.Context, opts client.TxnOption) (client.Txn, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Txn")
	}

	var r0 client.Txn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.TxnOption) (client.Txn, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.TxnOption) client.Txn); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Txn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.TxnOption) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Txn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Txn'
type MockClient_Txn_Call struct {
	*mock.Call
}

// Txn is a helper method to define mock.On call
//   - ctx context.Context
//   - opts client.TxnOption
func (_e *MockClient_Expecter) Txn(ctx interface{}, opts interface{}) *MockClient_Txn_Call {
	return &MockClient_Txn_Call{Call: _e.mock.On("Txn", ctx, opts)}
}

func (_c *MockClient_Txn_Call) Run(run func(ctx context.Context, opts client.TxnOption)) *MockClient_Txn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.TxnOption))
	})
	return _c
}

func (_c *MockClient_Txn_Call) Return(_a0 client.Txn, _a1 error) *MockClient_Txn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Txn_Call) RunAndReturn(run func(context.Context, client.TxnOption) (client.Txn, error)) *MockClient_Txn_Call {
	_c.Call.Return(run)
	return _c
}

// WALName provides a mock function with no fields
func (_m *MockClient) WALName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WALName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_WALName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WALName'
type MockClient_WALName_Call struct {
	*mock.Call
}

// WALName is a helper method to define mock.On call
func (_e *MockClient_Expecter) WALName() *MockClient_WALName_Call {
	return &MockClient_WALName_Call{Call: _e.mock.On("WALName")}
}

func (_c *MockClient_WALName_Call) Run(run func()) *MockClient_WALName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_WALName_Call) Return(_a0 string) *MockClient_WALName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_WALName_Call) RunAndReturn(run func() string) *MockClient_WALName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
