// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_viewpb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	viewpb "github.com/milvus-io/milvus/pkg/v2/proto/viewpb"
)

// MockQueryViewSyncServiceClient is an autogenerated mock type for the QueryViewSyncServiceClient type
type MockQueryViewSyncServiceClient struct {
	mock.Mock
}

type MockQueryViewSyncServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryViewSyncServiceClient) EXPECT() *MockQueryViewSyncServiceClient_Expecter {
	return &MockQueryViewSyncServiceClient_Expecter{mock: &_m.Mock}
}

// Sync provides a mock function with given fields: ctx, opts
func (_m *MockQueryViewSyncServiceClient) Sync(ctx context.Context, opts ...grpc.CallOption) (viewpb.QueryViewSyncService_SyncClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 viewpb.QueryViewSyncService_SyncClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (viewpb.QueryViewSyncService_SyncClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) viewpb.QueryViewSyncService_SyncClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(viewpb.QueryViewSyncService_SyncClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryViewSyncServiceClient_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockQueryViewSyncServiceClient_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockQueryViewSyncServiceClient_Expecter) Sync(ctx interface{}, opts ...interface{}) *MockQueryViewSyncServiceClient_Sync_Call {
	return &MockQueryViewSyncServiceClient_Sync_Call{Call: _e.mock.On("Sync",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockQueryViewSyncServiceClient_Sync_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockQueryViewSyncServiceClient_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryViewSyncServiceClient_Sync_Call) Return(_a0 viewpb.QueryViewSyncService_SyncClient, _a1 error) *MockQueryViewSyncServiceClient_Sync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryViewSyncServiceClient_Sync_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (viewpb.QueryViewSyncService_SyncClient, error)) *MockQueryViewSyncServiceClient_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryViewSyncServiceClient creates a new instance of MockQueryViewSyncServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryViewSyncServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryViewSyncServiceClient {
	mock := &MockQueryViewSyncServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
