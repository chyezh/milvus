// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.4
// source: view.proto

package viewpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryViewState int32

const (
	QueryViewState_QueryViewStateUnknown       QueryViewState = 0
	QueryViewState_QueryViewStatePreparing     QueryViewState = 1
	QueryViewState_QueryViewStateReady         QueryViewState = 2 // Mark as Ready if all node on these shard is ready
	QueryViewState_QueryViewStateUp            QueryViewState = 3 // Mark as Up if all node on these shard is up, and the view is enabled at streaming node.
	QueryViewState_QueryViewStateDown          QueryViewState = 4 // Mark as Down if the view is disabled at streaming node.
	QueryViewState_QueryViewStateUnrecoverable QueryViewState = 5 // Mark as Unrecoverable if the view is unrecoverable on any node.
	QueryViewState_QueryViewStateDropping      QueryViewState = 6 // Mark as dropping to do the resource cleanup opeartion for the view.
	QueryViewState_QueryViewStateDropped       QueryViewState = 7 // Mark as dropped if the view is dropped and can be removed from recovery.
)

// Enum value maps for QueryViewState.
var (
	QueryViewState_name = map[int32]string{
		0: "QueryViewStateUnknown",
		1: "QueryViewStatePreparing",
		2: "QueryViewStateReady",
		3: "QueryViewStateUp",
		4: "QueryViewStateDown",
		5: "QueryViewStateUnrecoverable",
		6: "QueryViewStateDropping",
		7: "QueryViewStateDropped",
	}
	QueryViewState_value = map[string]int32{
		"QueryViewStateUnknown":       0,
		"QueryViewStatePreparing":     1,
		"QueryViewStateReady":         2,
		"QueryViewStateUp":            3,
		"QueryViewStateDown":          4,
		"QueryViewStateUnrecoverable": 5,
		"QueryViewStateDropping":      6,
		"QueryViewStateDropped":       7,
	}
)

func (x QueryViewState) Enum() *QueryViewState {
	p := new(QueryViewState)
	*p = x
	return p
}

func (x QueryViewState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryViewState) Descriptor() protoreflect.EnumDescriptor {
	return file_view_proto_enumTypes[0].Descriptor()
}

func (QueryViewState) Type() protoreflect.EnumType {
	return &file_view_proto_enumTypes[0]
}

func (x QueryViewState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryViewState.Descriptor instead.
func (QueryViewState) EnumDescriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{0}
}

type QueryViewSegmentState int32

const (
	QueryViewSegmentState_QueryViewSegmentStateUnknown  QueryViewSegmentState = 0
	QueryViewSegmentState_QueryViewSegmentStateNotReady QueryViewSegmentState = 1
	QueryViewSegmentState_QueryViewSegmentStateReady    QueryViewSegmentState = 2
)

// Enum value maps for QueryViewSegmentState.
var (
	QueryViewSegmentState_name = map[int32]string{
		0: "QueryViewSegmentStateUnknown",
		1: "QueryViewSegmentStateNotReady",
		2: "QueryViewSegmentStateReady",
	}
	QueryViewSegmentState_value = map[string]int32{
		"QueryViewSegmentStateUnknown":  0,
		"QueryViewSegmentStateNotReady": 1,
		"QueryViewSegmentStateReady":    2,
	}
)

func (x QueryViewSegmentState) Enum() *QueryViewSegmentState {
	p := new(QueryViewSegmentState)
	*p = x
	return p
}

func (x QueryViewSegmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryViewSegmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_view_proto_enumTypes[1].Descriptor()
}

func (QueryViewSegmentState) Type() protoreflect.EnumType {
	return &file_view_proto_enumTypes[1]
}

func (x QueryViewSegmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryViewSegmentState.Descriptor instead.
func (QueryViewSegmentState) EnumDescriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{1}
}

type DataViewOfCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId int64              `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Shards       []*DataViewOfShard `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
	DataVersion  int64              `protobuf:"varint,3,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
}

func (x *DataViewOfCollection) Reset() {
	*x = DataViewOfCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataViewOfCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataViewOfCollection) ProtoMessage() {}

func (x *DataViewOfCollection) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataViewOfCollection.ProtoReflect.Descriptor instead.
func (*DataViewOfCollection) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{0}
}

func (x *DataViewOfCollection) GetCollectionId() int64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *DataViewOfCollection) GetShards() []*DataViewOfShard {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *DataViewOfCollection) GetDataVersion() int64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

type DataViewOfShard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vchannel   string                 `protobuf:"bytes,1,opt,name=vchannel,proto3" json:"vchannel,omitempty"`
	Partitions []*DataViewOfPartition `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *DataViewOfShard) Reset() {
	*x = DataViewOfShard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataViewOfShard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataViewOfShard) ProtoMessage() {}

func (x *DataViewOfShard) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataViewOfShard.ProtoReflect.Descriptor instead.
func (*DataViewOfShard) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{1}
}

func (x *DataViewOfShard) GetVchannel() string {
	if x != nil {
		return x.Vchannel
	}
	return ""
}

func (x *DataViewOfShard) GetPartitions() []*DataViewOfPartition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type DataViewOfPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId int64                `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Segments    []*DataViewOfSegment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *DataViewOfPartition) Reset() {
	*x = DataViewOfPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataViewOfPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataViewOfPartition) ProtoMessage() {}

func (x *DataViewOfPartition) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataViewOfPartition.ProtoReflect.Descriptor instead.
func (*DataViewOfPartition) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{2}
}

func (x *DataViewOfPartition) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *DataViewOfPartition) GetSegments() []*DataViewOfSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type DataViewOfSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentId   int64 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	DataVersion int64 `protobuf:"varint,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"` // Data version when this segment join the dataview.
}

func (x *DataViewOfSegment) Reset() {
	*x = DataViewOfSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataViewOfSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataViewOfSegment) ProtoMessage() {}

func (x *DataViewOfSegment) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataViewOfSegment.ProtoReflect.Descriptor instead.
func (*DataViewOfSegment) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{3}
}

func (x *DataViewOfSegment) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *DataViewOfSegment) GetDataVersion() int64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

type QueryViewOfShard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta          *QueryViewMeta            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	QueryNode     []*QueryViewOfQueryNode   `protobuf:"bytes,2,rep,name=query_node,json=queryNode,proto3" json:"query_node,omitempty"`
	StreamingNode *QueryViewOfStreamingNode `protobuf:"bytes,3,opt,name=streaming_node,json=streamingNode,proto3" json:"streaming_node,omitempty"`
}

func (x *QueryViewOfShard) Reset() {
	*x = QueryViewOfShard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryViewOfShard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewOfShard) ProtoMessage() {}

func (x *QueryViewOfShard) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewOfShard.ProtoReflect.Descriptor instead.
func (*QueryViewOfShard) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{4}
}

func (x *QueryViewOfShard) GetMeta() *QueryViewMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QueryViewOfShard) GetQueryNode() []*QueryViewOfQueryNode {
	if x != nil {
		return x.QueryNode
	}
	return nil
}

func (x *QueryViewOfShard) GetStreamingNode() *QueryViewOfStreamingNode {
	if x != nil {
		return x.StreamingNode
	}
	return nil
}

type QueryViewMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId int64              `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	ReplicaId    int64              `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Vchannel     string             `protobuf:"bytes,3,opt,name=vchannel,proto3" json:"vchannel,omitempty"`
	Version      *QueryViewVersion  `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	State        QueryViewState     `protobuf:"varint,5,opt,name=state,proto3,enum=milvus.proto.view.QueryViewState" json:"state,omitempty"`
	Settings     *QueryViewSettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *QueryViewMeta) Reset() {
	*x = QueryViewMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryViewMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewMeta) ProtoMessage() {}

func (x *QueryViewMeta) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewMeta.ProtoReflect.Descriptor instead.
func (*QueryViewMeta) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{5}
}

func (x *QueryViewMeta) GetCollectionId() int64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *QueryViewMeta) GetReplicaId() int64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *QueryViewMeta) GetVchannel() string {
	if x != nil {
		return x.Vchannel
	}
	return ""
}

func (x *QueryViewMeta) GetVersion() *QueryViewVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *QueryViewMeta) GetState() QueryViewState {
	if x != nil {
		return x.State
	}
	return QueryViewState_QueryViewStateUnknown
}

func (x *QueryViewMeta) GetSettings() *QueryViewSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type QueryViewSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredPartitions []int64 `protobuf:"varint,1,rep,packed,name=required_partitions,json=requiredPartitions,proto3" json:"required_partitions,omitempty"` // the partitions that must be loaded to make the view available.
	OptionalPartitions []int64 `protobuf:"varint,2,rep,packed,name=optional_partitions,json=optionalPartitions,proto3" json:"optional_partitions,omitempty"` // the partitions that need be loaded, but not influence the view availability.
	RequiredFields     []int64 `protobuf:"varint,3,rep,packed,name=required_fields,json=requiredFields,proto3" json:"required_fields,omitempty"`             // the fields that must be loaded to make the view available.
}

func (x *QueryViewSettings) Reset() {
	*x = QueryViewSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryViewSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewSettings) ProtoMessage() {}

func (x *QueryViewSettings) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewSettings.ProtoReflect.Descriptor instead.
func (*QueryViewSettings) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{6}
}

func (x *QueryViewSettings) GetRequiredPartitions() []int64 {
	if x != nil {
		return x.RequiredPartitions
	}
	return nil
}

func (x *QueryViewSettings) GetOptionalPartitions() []int64 {
	if x != nil {
		return x.OptionalPartitions
	}
	return nil
}

func (x *QueryViewSettings) GetRequiredFields() []int64 {
	if x != nil {
		return x.RequiredFields
	}
	return nil
}

type QueryViewOfStreamingNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryViewOfStreamingNode) Reset() {
	*x = QueryViewOfStreamingNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryViewOfStreamingNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewOfStreamingNode) ProtoMessage() {}

func (x *QueryViewOfStreamingNode) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewOfStreamingNode.ProtoReflect.Descriptor instead.
func (*QueryViewOfStreamingNode) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{7}
}

type QueryViewOfQueryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     int64                   `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Partitions []*QueryViewOfPartition `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"` // partitions that need to be loaded, used for partitial partition loading.
}

func (x *QueryViewOfQueryNode) Reset() {
	*x = QueryViewOfQueryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryViewOfQueryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewOfQueryNode) ProtoMessage() {}

func (x *QueryViewOfQueryNode) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewOfQueryNode.ProtoReflect.Descriptor instead.
func (*QueryViewOfQueryNode) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{8}
}

func (x *QueryViewOfQueryNode) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *QueryViewOfQueryNode) GetPartitions() []*QueryViewOfPartition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type QueryViewVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVersion  int64 `protobuf:"varint,1,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`    // the data version when this view is created.
	QueryVersion int64 `protobuf:"varint,2,opt,name=query_version,json=queryVersion,proto3" json:"query_version,omitempty"` // the query version when this view is created.
}

func (x *QueryViewVersion) Reset() {
	*x = QueryViewVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryViewVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewVersion) ProtoMessage() {}

func (x *QueryViewVersion) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewVersion.ProtoReflect.Descriptor instead.
func (*QueryViewVersion) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{9}
}

func (x *QueryViewVersion) GetDataVersion() int64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *QueryViewVersion) GetQueryVersion() int64 {
	if x != nil {
		return x.QueryVersion
	}
	return 0
}

type QueryViewOfPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId int64                 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Segments    []*QueryViewOfSegment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *QueryViewOfPartition) Reset() {
	*x = QueryViewOfPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryViewOfPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewOfPartition) ProtoMessage() {}

func (x *QueryViewOfPartition) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewOfPartition.ProtoReflect.Descriptor instead.
func (*QueryViewOfPartition) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{10}
}

func (x *QueryViewOfPartition) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *QueryViewOfPartition) GetSegments() []*QueryViewOfSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type QueryViewOfSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentId int64                 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	State     QueryViewSegmentState `protobuf:"varint,2,opt,name=state,proto3,enum=milvus.proto.view.QueryViewSegmentState" json:"state,omitempty"` // segment is ready or not.
}

func (x *QueryViewOfSegment) Reset() {
	*x = QueryViewOfSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryViewOfSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViewOfSegment) ProtoMessage() {}

func (x *QueryViewOfSegment) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViewOfSegment.ProtoReflect.Descriptor instead.
func (*QueryViewOfSegment) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{11}
}

func (x *QueryViewOfSegment) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *QueryViewOfSegment) GetState() QueryViewSegmentState {
	if x != nil {
		return x.State
	}
	return QueryViewSegmentState_QueryViewSegmentStateUnknown
}

// SyncRequest is the request of the sync query view.
type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SyncRequest_Views
	//	*SyncRequest_Close
	Request isSyncRequest_Request `protobuf_oneof:"request"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{12}
}

func (m *SyncRequest) GetRequest() isSyncRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SyncRequest) GetViews() *SyncQueryViewsRequest {
	if x, ok := x.GetRequest().(*SyncRequest_Views); ok {
		return x.Views
	}
	return nil
}

func (x *SyncRequest) GetClose() *SyncCloseRequest {
	if x, ok := x.GetRequest().(*SyncRequest_Close); ok {
		return x.Close
	}
	return nil
}

type isSyncRequest_Request interface {
	isSyncRequest_Request()
}

type SyncRequest_Views struct {
	Views *SyncQueryViewsRequest `protobuf:"bytes,1,opt,name=views,proto3,oneof"`
}

type SyncRequest_Close struct {
	Close *SyncCloseRequest `protobuf:"bytes,2,opt,name=close,proto3,oneof"`
}

func (*SyncRequest_Views) isSyncRequest_Request() {}

func (*SyncRequest_Close) isSyncRequest_Request() {}

// SyncQueryViewsRequest is the request of the sync query view.
type SyncQueryViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryViews []*QueryViewOfShard `protobuf:"bytes,1,rep,name=query_views,json=queryViews,proto3" json:"query_views,omitempty"`
}

func (x *SyncQueryViewsRequest) Reset() {
	*x = SyncQueryViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncQueryViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncQueryViewsRequest) ProtoMessage() {}

func (x *SyncQueryViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncQueryViewsRequest.ProtoReflect.Descriptor instead.
func (*SyncQueryViewsRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{13}
}

func (x *SyncQueryViewsRequest) GetQueryViews() []*QueryViewOfShard {
	if x != nil {
		return x.QueryViews
	}
	return nil
}

// SyncCloseRequest is the request of the sync close.
type SyncCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncCloseRequest) Reset() {
	*x = SyncCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCloseRequest) ProtoMessage() {}

func (x *SyncCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCloseRequest.ProtoReflect.Descriptor instead.
func (*SyncCloseRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{14}
}

// SyncResponse is the response of the sync query view request.
type SyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*SyncResponse_Views
	//	*SyncResponse_Close
	Response isSyncResponse_Response `protobuf_oneof:"response"`
}

func (x *SyncResponse) Reset() {
	*x = SyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResponse) ProtoMessage() {}

func (x *SyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResponse.ProtoReflect.Descriptor instead.
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{15}
}

func (m *SyncResponse) GetResponse() isSyncResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SyncResponse) GetViews() *SyncQueryViewsResponse {
	if x, ok := x.GetResponse().(*SyncResponse_Views); ok {
		return x.Views
	}
	return nil
}

func (x *SyncResponse) GetClose() *SyncCloseResponse {
	if x, ok := x.GetResponse().(*SyncResponse_Close); ok {
		return x.Close
	}
	return nil
}

type isSyncResponse_Response interface {
	isSyncResponse_Response()
}

type SyncResponse_Views struct {
	Views *SyncQueryViewsResponse `protobuf:"bytes,1,opt,name=views,proto3,oneof"`
}

type SyncResponse_Close struct {
	Close *SyncCloseResponse `protobuf:"bytes,2,opt,name=close,proto3,oneof"`
}

func (*SyncResponse_Views) isSyncResponse_Response() {}

func (*SyncResponse_Close) isSyncResponse_Response() {}

// SyncQueryViewsResponse is the response of the sync query view request.
type SyncQueryViewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryViews []*QueryViewOfShard `protobuf:"bytes,1,rep,name=query_views,json=queryViews,proto3" json:"query_views,omitempty"`
	// Types that are assignable to BalanceAttributes:
	//
	//	*SyncQueryViewsResponse_StreamingNode
	//	*SyncQueryViewsResponse_QueryNode
	BalanceAttributes isSyncQueryViewsResponse_BalanceAttributes `protobuf_oneof:"balance_attributes"`
}

func (x *SyncQueryViewsResponse) Reset() {
	*x = SyncQueryViewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncQueryViewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncQueryViewsResponse) ProtoMessage() {}

func (x *SyncQueryViewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncQueryViewsResponse.ProtoReflect.Descriptor instead.
func (*SyncQueryViewsResponse) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{16}
}

func (x *SyncQueryViewsResponse) GetQueryViews() []*QueryViewOfShard {
	if x != nil {
		return x.QueryViews
	}
	return nil
}

func (m *SyncQueryViewsResponse) GetBalanceAttributes() isSyncQueryViewsResponse_BalanceAttributes {
	if m != nil {
		return m.BalanceAttributes
	}
	return nil
}

func (x *SyncQueryViewsResponse) GetStreamingNode() *StreamingNodeBalanceAttributes {
	if x, ok := x.GetBalanceAttributes().(*SyncQueryViewsResponse_StreamingNode); ok {
		return x.StreamingNode
	}
	return nil
}

func (x *SyncQueryViewsResponse) GetQueryNode() *QueryNodeBalanceAttributes {
	if x, ok := x.GetBalanceAttributes().(*SyncQueryViewsResponse_QueryNode); ok {
		return x.QueryNode
	}
	return nil
}

type isSyncQueryViewsResponse_BalanceAttributes interface {
	isSyncQueryViewsResponse_BalanceAttributes()
}

type SyncQueryViewsResponse_StreamingNode struct {
	StreamingNode *StreamingNodeBalanceAttributes `protobuf:"bytes,2,opt,name=streaming_node,json=streamingNode,proto3,oneof"`
}

type SyncQueryViewsResponse_QueryNode struct {
	QueryNode *QueryNodeBalanceAttributes `protobuf:"bytes,3,opt,name=query_node,json=queryNode,proto3,oneof"`
}

func (*SyncQueryViewsResponse_StreamingNode) isSyncQueryViewsResponse_BalanceAttributes() {}

func (*SyncQueryViewsResponse_QueryNode) isSyncQueryViewsResponse_BalanceAttributes() {}

// SyncCloseResponse is the response of the sync close.
type SyncCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncCloseResponse) Reset() {
	*x = SyncCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCloseResponse) ProtoMessage() {}

func (x *SyncCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCloseResponse.ProtoReflect.Descriptor instead.
func (*SyncCloseResponse) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{17}
}

// StreamingNodeBalanceAttributes is the attributes of streaming node for the balance operation.
type StreamingNodeBalanceAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamingNodeBalanceAttributes) Reset() {
	*x = StreamingNodeBalanceAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingNodeBalanceAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingNodeBalanceAttributes) ProtoMessage() {}

func (x *StreamingNodeBalanceAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingNodeBalanceAttributes.ProtoReflect.Descriptor instead.
func (*StreamingNodeBalanceAttributes) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{18}
}

// QueryNodeBalanceAttributes is the attributes of query node for the balance operation.
// Adding various attributes to the QueryNodeBalanceAttributes to make the querycoord balance to make decision.
type QueryNodeBalanceAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryUsage int64 `protobuf:"varint,1,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	DiskUsage   int64 `protobuf:"varint,2,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`
}

func (x *QueryNodeBalanceAttributes) Reset() {
	*x = QueryNodeBalanceAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNodeBalanceAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNodeBalanceAttributes) ProtoMessage() {}

func (x *QueryNodeBalanceAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNodeBalanceAttributes.ProtoReflect.Descriptor instead.
func (*QueryNodeBalanceAttributes) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{19}
}

func (x *QueryNodeBalanceAttributes) GetMemoryUsage() int64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *QueryNodeBalanceAttributes) GetDiskUsage() int64 {
	if x != nil {
		return x.DiskUsage
	}
	return 0
}

var File_view_proto protoreflect.FileDescriptor

var file_view_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x22,
	0x9a, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x0f,
	0x44, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x7a, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x4f,
	0x66, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x55, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x46, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x69, 0x65, 0x77, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x4f,
	0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xa9, 0x02,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x3d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x78, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x69, 0x65, 0x77, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x5a, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x14,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x15, 0x53, 0x79, 0x6e,
	0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a,
	0x0c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x3c, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x16, 0x53,
	0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x13, 0x0a,
	0x11, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x2a, 0xe7, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x07, 0x2a, 0x7c,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x32, 0x65, 0x0a, 0x14,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1e, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x69, 0x65, 0x77, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_view_proto_rawDescOnce sync.Once
	file_view_proto_rawDescData = file_view_proto_rawDesc
)

func file_view_proto_rawDescGZIP() []byte {
	file_view_proto_rawDescOnce.Do(func() {
		file_view_proto_rawDescData = protoimpl.X.CompressGZIP(file_view_proto_rawDescData)
	})
	return file_view_proto_rawDescData
}

var file_view_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_view_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_view_proto_goTypes = []interface{}{
	(QueryViewState)(0),                    // 0: milvus.proto.view.QueryViewState
	(QueryViewSegmentState)(0),             // 1: milvus.proto.view.QueryViewSegmentState
	(*DataViewOfCollection)(nil),           // 2: milvus.proto.view.DataViewOfCollection
	(*DataViewOfShard)(nil),                // 3: milvus.proto.view.DataViewOfShard
	(*DataViewOfPartition)(nil),            // 4: milvus.proto.view.DataViewOfPartition
	(*DataViewOfSegment)(nil),              // 5: milvus.proto.view.DataViewOfSegment
	(*QueryViewOfShard)(nil),               // 6: milvus.proto.view.QueryViewOfShard
	(*QueryViewMeta)(nil),                  // 7: milvus.proto.view.QueryViewMeta
	(*QueryViewSettings)(nil),              // 8: milvus.proto.view.QueryViewSettings
	(*QueryViewOfStreamingNode)(nil),       // 9: milvus.proto.view.QueryViewOfStreamingNode
	(*QueryViewOfQueryNode)(nil),           // 10: milvus.proto.view.QueryViewOfQueryNode
	(*QueryViewVersion)(nil),               // 11: milvus.proto.view.QueryViewVersion
	(*QueryViewOfPartition)(nil),           // 12: milvus.proto.view.QueryViewOfPartition
	(*QueryViewOfSegment)(nil),             // 13: milvus.proto.view.QueryViewOfSegment
	(*SyncRequest)(nil),                    // 14: milvus.proto.view.SyncRequest
	(*SyncQueryViewsRequest)(nil),          // 15: milvus.proto.view.SyncQueryViewsRequest
	(*SyncCloseRequest)(nil),               // 16: milvus.proto.view.SyncCloseRequest
	(*SyncResponse)(nil),                   // 17: milvus.proto.view.SyncResponse
	(*SyncQueryViewsResponse)(nil),         // 18: milvus.proto.view.SyncQueryViewsResponse
	(*SyncCloseResponse)(nil),              // 19: milvus.proto.view.SyncCloseResponse
	(*StreamingNodeBalanceAttributes)(nil), // 20: milvus.proto.view.StreamingNodeBalanceAttributes
	(*QueryNodeBalanceAttributes)(nil),     // 21: milvus.proto.view.QueryNodeBalanceAttributes
}
var file_view_proto_depIdxs = []int32{
	3,  // 0: milvus.proto.view.DataViewOfCollection.shards:type_name -> milvus.proto.view.DataViewOfShard
	4,  // 1: milvus.proto.view.DataViewOfShard.partitions:type_name -> milvus.proto.view.DataViewOfPartition
	5,  // 2: milvus.proto.view.DataViewOfPartition.segments:type_name -> milvus.proto.view.DataViewOfSegment
	7,  // 3: milvus.proto.view.QueryViewOfShard.meta:type_name -> milvus.proto.view.QueryViewMeta
	10, // 4: milvus.proto.view.QueryViewOfShard.query_node:type_name -> milvus.proto.view.QueryViewOfQueryNode
	9,  // 5: milvus.proto.view.QueryViewOfShard.streaming_node:type_name -> milvus.proto.view.QueryViewOfStreamingNode
	11, // 6: milvus.proto.view.QueryViewMeta.version:type_name -> milvus.proto.view.QueryViewVersion
	0,  // 7: milvus.proto.view.QueryViewMeta.state:type_name -> milvus.proto.view.QueryViewState
	8,  // 8: milvus.proto.view.QueryViewMeta.settings:type_name -> milvus.proto.view.QueryViewSettings
	12, // 9: milvus.proto.view.QueryViewOfQueryNode.partitions:type_name -> milvus.proto.view.QueryViewOfPartition
	13, // 10: milvus.proto.view.QueryViewOfPartition.segments:type_name -> milvus.proto.view.QueryViewOfSegment
	1,  // 11: milvus.proto.view.QueryViewOfSegment.state:type_name -> milvus.proto.view.QueryViewSegmentState
	15, // 12: milvus.proto.view.SyncRequest.views:type_name -> milvus.proto.view.SyncQueryViewsRequest
	16, // 13: milvus.proto.view.SyncRequest.close:type_name -> milvus.proto.view.SyncCloseRequest
	6,  // 14: milvus.proto.view.SyncQueryViewsRequest.query_views:type_name -> milvus.proto.view.QueryViewOfShard
	18, // 15: milvus.proto.view.SyncResponse.views:type_name -> milvus.proto.view.SyncQueryViewsResponse
	19, // 16: milvus.proto.view.SyncResponse.close:type_name -> milvus.proto.view.SyncCloseResponse
	6,  // 17: milvus.proto.view.SyncQueryViewsResponse.query_views:type_name -> milvus.proto.view.QueryViewOfShard
	20, // 18: milvus.proto.view.SyncQueryViewsResponse.streaming_node:type_name -> milvus.proto.view.StreamingNodeBalanceAttributes
	21, // 19: milvus.proto.view.SyncQueryViewsResponse.query_node:type_name -> milvus.proto.view.QueryNodeBalanceAttributes
	14, // 20: milvus.proto.view.QueryViewSyncService.Sync:input_type -> milvus.proto.view.SyncRequest
	17, // 21: milvus.proto.view.QueryViewSyncService.Sync:output_type -> milvus.proto.view.SyncResponse
	21, // [21:22] is the sub-list for method output_type
	20, // [20:21] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_view_proto_init() }
func file_view_proto_init() {
	if File_view_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_view_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataViewOfCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataViewOfShard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataViewOfPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataViewOfSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryViewOfShard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryViewMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryViewSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryViewOfStreamingNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryViewOfQueryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryViewVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryViewOfPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryViewOfSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncQueryViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncQueryViewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingNodeBalanceAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNodeBalanceAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_view_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SyncRequest_Views)(nil),
		(*SyncRequest_Close)(nil),
	}
	file_view_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SyncResponse_Views)(nil),
		(*SyncResponse_Close)(nil),
	}
	file_view_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SyncQueryViewsResponse_StreamingNode)(nil),
		(*SyncQueryViewsResponse_QueryNode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_view_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_view_proto_goTypes,
		DependencyIndexes: file_view_proto_depIdxs,
		EnumInfos:         file_view_proto_enumTypes,
		MessageInfos:      file_view_proto_msgTypes,
	}.Build()
	File_view_proto = out.File
	file_view_proto_rawDesc = nil
	file_view_proto_goTypes = nil
	file_view_proto_depIdxs = nil
}
