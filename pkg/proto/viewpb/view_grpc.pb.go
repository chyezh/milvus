// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.4
// source: view.proto

package viewpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryViewSyncService_Sync_FullMethodName = "/milvus.proto.view.QueryViewSyncService/Sync"
)

// QueryViewSyncServiceClient is the client API for QueryViewSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryViewSyncServiceClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (QueryViewSyncService_SyncClient, error)
}

type queryViewSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryViewSyncServiceClient(cc grpc.ClientConnInterface) QueryViewSyncServiceClient {
	return &queryViewSyncServiceClient{cc}
}

func (c *queryViewSyncServiceClient) Sync(ctx context.Context, opts ...grpc.CallOption) (QueryViewSyncService_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryViewSyncService_ServiceDesc.Streams[0], QueryViewSyncService_Sync_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queryViewSyncServiceSyncClient{stream}
	return x, nil
}

type QueryViewSyncService_SyncClient interface {
	Send(*SyncRequest) error
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type queryViewSyncServiceSyncClient struct {
	grpc.ClientStream
}

func (x *queryViewSyncServiceSyncClient) Send(m *SyncRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queryViewSyncServiceSyncClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryViewSyncServiceServer is the server API for QueryViewSyncService service.
// All implementations should embed UnimplementedQueryViewSyncServiceServer
// for forward compatibility
type QueryViewSyncServiceServer interface {
	Sync(QueryViewSyncService_SyncServer) error
}

// UnimplementedQueryViewSyncServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQueryViewSyncServiceServer struct {
}

func (UnimplementedQueryViewSyncServiceServer) Sync(QueryViewSyncService_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

// UnsafeQueryViewSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryViewSyncServiceServer will
// result in compilation errors.
type UnsafeQueryViewSyncServiceServer interface {
	mustEmbedUnimplementedQueryViewSyncServiceServer()
}

func RegisterQueryViewSyncServiceServer(s grpc.ServiceRegistrar, srv QueryViewSyncServiceServer) {
	s.RegisterService(&QueryViewSyncService_ServiceDesc, srv)
}

func _QueryViewSyncService_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryViewSyncServiceServer).Sync(&queryViewSyncServiceSyncServer{stream})
}

type QueryViewSyncService_SyncServer interface {
	Send(*SyncResponse) error
	Recv() (*SyncRequest, error)
	grpc.ServerStream
}

type queryViewSyncServiceSyncServer struct {
	grpc.ServerStream
}

func (x *queryViewSyncServiceSyncServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queryViewSyncServiceSyncServer) Recv() (*SyncRequest, error) {
	m := new(SyncRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryViewSyncService_ServiceDesc is the grpc.ServiceDesc for QueryViewSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryViewSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.view.QueryViewSyncService",
	HandlerType: (*QueryViewSyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _QueryViewSyncService_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "view.proto",
}
