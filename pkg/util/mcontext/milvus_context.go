package mcontext

import (
	"context"
	"strconv"

	"github.com/milvus-io/milvus/pkg/v2/util/paramtable"
	"go.uber.org/zap/zapcore"
	"google.golang.org/grpc/metadata"
)

const (
	logLevelRPCMetaKeyLegacy = "log_level"
	logLevelRPCMetaKey       = "log-level"
	sourceNodeIDKey          = "src-node-id"
	DestinationServerIDKey   = "ServerID"
	DestinationClusterKey    = "Cluster"
)

var (
	MilvusContextKeyValue = milvusContextKeyType{}
	defaultMilvusContext  = MilvusContext{
		LogLevel:           zapcore.InvalidLevel,
		SourceNodeID:       0,
		DestinationNodeID:  0,
		DestinationCluster: "",
	}
)

type milvusContextKeyType struct{}

// MilvusContext is a context structure that contains some context information for milvus request or operation.
type MilvusContext struct {
	SourceNodeID       int64         // the request source node id if it is a context generated by some request.
	DestinationNodeID  int64         // the request destination node id if it is a context generated by some request.
	DestinationCluster string        // the request destination cluster if it is a context generated by some request.
	LogLevel           zapcore.Level // the expected log level for the request, invalid level doesn't change the log level of default logger.
}

// AppendOutgoingContext returns a new context with the MilvusContext.
func AppendOutgoingContext(ctx context.Context) context.Context {
	mctx := FromContext(ctx)

	ctx = metadata.AppendToOutgoingContext(ctx, logLevelRPCMetaKey, mctx.LogLevel.String())
	ctx = metadata.AppendToOutgoingContext(ctx, sourceNodeIDKey, paramtable.GetStringNodeID())
	ctx = metadata.AppendToOutgoingContext(ctx, DestinationClusterKey, paramtable.Get().CommonCfg.ClusterPrefix.GetValue())
	// destination of server id is injected by interceptor.ServerIDInjectionUnaryClientInterceptor
	// or the balancer picker of grpc client (streaming)
	// ctx = metadata.AppendToOutgoingContext(ctx, DestinationServerIDKey, xxx)
	return ctx
}

// NewMilvusContext returns a new context with the MilvusContext.
func NewMilvusContext(ctx context.Context) (context.Context, *MilvusContext) {
	_, ok := fromContext(ctx)
	if ok {
		return ctx, &defaultMilvusContext
	}
	// get the metadata from the context.
	md, _ := metadata.FromIncomingContext(ctx)

	mctx := &MilvusContext{
		SourceNodeID: unmarshalMetadata(md, func(s string) int64 {
			serverID, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				return 0
			}
			return serverID
		}, sourceNodeIDKey),

		DestinationNodeID: unmarshalMetadata(md, func(s string) int64 {
			serverID, err := strconv.ParseInt(s, 10, 64)
			if err != nil {
				return 0
			}
			return serverID
		}, DestinationServerIDKey),

		DestinationCluster: unmarshalMetadata(md, func(s string) string {
			return s
		}, DestinationClusterKey),

		LogLevel: unmarshalMetadata(md, func(s string) zapcore.Level {
			level, err := zapcore.ParseLevel(s)
			if err != nil {
				return zapcore.InvalidLevel
			}
			return level
		}, logLevelRPCMetaKey, logLevelRPCMetaKeyLegacy),
	}
	return withMilvusContext(ctx, mctx), mctx
}

// withMilvusContext returns a new context with the MilvusContext.
func withMilvusContext(ctx context.Context, milvusContext *MilvusContext) context.Context {
	return context.WithValue(ctx, MilvusContextKeyValue, milvusContext)
}

// FromContext returns the MilvusContext from the context.
func FromContext(ctx context.Context) *MilvusContext {
	mctx, ok := fromContext(ctx)
	if !ok {
		return &defaultMilvusContext
	}
	return mctx
}

// fromContext returns the MilvusContext from the context.
func fromContext(ctx context.Context) (*MilvusContext, bool) {
	milvusContext, ok := ctx.Value(MilvusContextKeyValue).(*MilvusContext)
	if !ok {
		return nil, false
	}
	return milvusContext, true
}

// unmarshalMetadata the metadata to the type T.
func unmarshalMetadata[T any](md metadata.MD, unmarshaler func(string) T, keys ...string) T {
	if md == nil {
		return unmarshaler("")
	}
	for _, key := range keys {
		if values := md.Get(key); len(values) > 0 {
			return unmarshaler(values[0])
		}
	}
	return unmarshaler("")
}
