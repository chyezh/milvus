// Code generated by mockery v2.53.3. DO NOT EDIT.

package replicatestream

import (
	context "context"

	streamingpb "github.com/milvus-io/milvus/pkg/v2/proto/streamingpb"
	mock "github.com/stretchr/testify/mock"
)

// MockReplicateStreamClientManager is an autogenerated mock type for the ReplicateStreamClientManager type
type MockReplicateStreamClientManager struct {
	mock.Mock
}

type MockReplicateStreamClientManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReplicateStreamClientManager) EXPECT() *MockReplicateStreamClientManager_Expecter {
	return &MockReplicateStreamClientManager_Expecter{mock: &_m.Mock}
}

// CreateReplicateStreamClient provides a mock function with given fields: ctx, replicateInfo
func (_m *MockReplicateStreamClientManager) CreateReplicateStreamClient(ctx context.Context, replicateInfo *streamingpb.ReplicatePChannelMeta) ReplicateStreamClient {
	ret := _m.Called(ctx, replicateInfo)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicateStreamClient")
	}

	var r0 ReplicateStreamClient
	if rf, ok := ret.Get(0).(func(context.Context, *streamingpb.ReplicatePChannelMeta) ReplicateStreamClient); ok {
		r0 = rf(ctx, replicateInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ReplicateStreamClient)
		}
	}

	return r0
}

// MockReplicateStreamClientManager_CreateReplicateStreamClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReplicateStreamClient'
type MockReplicateStreamClientManager_CreateReplicateStreamClient_Call struct {
	*mock.Call
}

// CreateReplicateStreamClient is a helper method to define mock.On call
//   - ctx context.Context
//   - replicateInfo *streamingpb.ReplicatePChannelMeta
func (_e *MockReplicateStreamClientManager_Expecter) CreateReplicateStreamClient(ctx interface{}, replicateInfo interface{}) *MockReplicateStreamClientManager_CreateReplicateStreamClient_Call {
	return &MockReplicateStreamClientManager_CreateReplicateStreamClient_Call{Call: _e.mock.On("CreateReplicateStreamClient", ctx, replicateInfo)}
}

func (_c *MockReplicateStreamClientManager_CreateReplicateStreamClient_Call) Run(run func(ctx context.Context, replicateInfo *streamingpb.ReplicatePChannelMeta)) *MockReplicateStreamClientManager_CreateReplicateStreamClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*streamingpb.ReplicatePChannelMeta))
	})
	return _c
}

func (_c *MockReplicateStreamClientManager_CreateReplicateStreamClient_Call) Return(_a0 ReplicateStreamClient) *MockReplicateStreamClientManager_CreateReplicateStreamClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicateStreamClientManager_CreateReplicateStreamClient_Call) RunAndReturn(run func(context.Context, *streamingpb.ReplicatePChannelMeta) ReplicateStreamClient) *MockReplicateStreamClientManager_CreateReplicateStreamClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReplicateStreamClientManager creates a new instance of MockReplicateStreamClientManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplicateStreamClientManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplicateStreamClientManager {
	mock := &MockReplicateStreamClientManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
