// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

package logpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	milvuspb "github.com/milvus-io/milvus-proto/go-api/v2/milvuspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// LogCode is the error code for log internal component.
type LogCode int32

const (
	LogCode_LOG_CODE_OK                     LogCode = 0
	LogCode_LOG_CODE_CHANNEL_EXIST          LogCode = 1
	LogCode_LOG_CODE_CHANNEL_NOT_EXIST      LogCode = 2
	LogCode_LOG_CODE_CHANNEL_FENCED         LogCode = 3
	LogCode_LOG_CODE_ON_SHUTDOWN            LogCode = 4
	LogCode_LOG_CODE_INVALID_REQUEST_SEQ    LogCode = 5
	LogCode_LOG_CODE_UNMATCHED_CHANNEL_TERM LogCode = 6
	LogCode_LOG_CODE_IGNORED_OPERATION      LogCode = 7
	LogCode_LOG_CODE_INNER                  LogCode = 8
	LogCode_LOG_CODE_EOF                    LogCode = 9
	LogCode_LOG_CODE_UNKNOWN                LogCode = 999
)

var LogCode_name = map[int32]string{
	0:   "LOG_CODE_OK",
	1:   "LOG_CODE_CHANNEL_EXIST",
	2:   "LOG_CODE_CHANNEL_NOT_EXIST",
	3:   "LOG_CODE_CHANNEL_FENCED",
	4:   "LOG_CODE_ON_SHUTDOWN",
	5:   "LOG_CODE_INVALID_REQUEST_SEQ",
	6:   "LOG_CODE_UNMATCHED_CHANNEL_TERM",
	7:   "LOG_CODE_IGNORED_OPERATION",
	8:   "LOG_CODE_INNER",
	9:   "LOG_CODE_EOF",
	999: "LOG_CODE_UNKNOWN",
}

var LogCode_value = map[string]int32{
	"LOG_CODE_OK":                     0,
	"LOG_CODE_CHANNEL_EXIST":          1,
	"LOG_CODE_CHANNEL_NOT_EXIST":      2,
	"LOG_CODE_CHANNEL_FENCED":         3,
	"LOG_CODE_ON_SHUTDOWN":            4,
	"LOG_CODE_INVALID_REQUEST_SEQ":    5,
	"LOG_CODE_UNMATCHED_CHANNEL_TERM": 6,
	"LOG_CODE_IGNORED_OPERATION":      7,
	"LOG_CODE_INNER":                  8,
	"LOG_CODE_EOF":                    9,
	"LOG_CODE_UNKNOWN":                999,
}

func (x LogCode) String() string {
	return proto.EnumName(LogCode_name, int32(x))
}

func (LogCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{0}
}

// MessageID is the unique identifier of messages in same channel.
// It's different if underlying message system is different.
type MessageID struct {
	// Types that are valid to be assigned to Id:
	//
	//	*MessageID_Kafka
	//	*MessageID_Pulsar
	//	*MessageID_Rmq
	//	*MessageID_Nmq
	Id                   isMessageID_Id `protobuf_oneof:"id"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MessageID) Reset()         { *m = MessageID{} }
func (m *MessageID) String() string { return proto.CompactTextString(m) }
func (*MessageID) ProtoMessage()    {}
func (*MessageID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{0}
}

func (m *MessageID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageID.Unmarshal(m, b)
}
func (m *MessageID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageID.Marshal(b, m, deterministic)
}
func (m *MessageID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageID.Merge(m, src)
}
func (m *MessageID) XXX_Size() int {
	return xxx_messageInfo_MessageID.Size(m)
}
func (m *MessageID) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageID.DiscardUnknown(m)
}

var xxx_messageInfo_MessageID proto.InternalMessageInfo

type isMessageID_Id interface {
	isMessageID_Id()
}

type MessageID_Kafka struct {
	Kafka *MessageIDKafka `protobuf:"bytes,1,opt,name=kafka,proto3,oneof"`
}

type MessageID_Pulsar struct {
	Pulsar *MessageIDPulsar `protobuf:"bytes,2,opt,name=pulsar,proto3,oneof"`
}

type MessageID_Rmq struct {
	Rmq *MessageIDRmq `protobuf:"bytes,3,opt,name=rmq,proto3,oneof"`
}

type MessageID_Nmq struct {
	Nmq *MessageIDNmq `protobuf:"bytes,4,opt,name=nmq,proto3,oneof"`
}

func (*MessageID_Kafka) isMessageID_Id() {}

func (*MessageID_Pulsar) isMessageID_Id() {}

func (*MessageID_Rmq) isMessageID_Id() {}

func (*MessageID_Nmq) isMessageID_Id() {}

func (m *MessageID) GetId() isMessageID_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MessageID) GetKafka() *MessageIDKafka {
	if x, ok := m.GetId().(*MessageID_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (m *MessageID) GetPulsar() *MessageIDPulsar {
	if x, ok := m.GetId().(*MessageID_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

func (m *MessageID) GetRmq() *MessageIDRmq {
	if x, ok := m.GetId().(*MessageID_Rmq); ok {
		return x.Rmq
	}
	return nil
}

func (m *MessageID) GetNmq() *MessageIDNmq {
	if x, ok := m.GetId().(*MessageID_Nmq); ok {
		return x.Nmq
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MessageID) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MessageID_Kafka)(nil),
		(*MessageID_Pulsar)(nil),
		(*MessageID_Rmq)(nil),
		(*MessageID_Nmq)(nil),
	}
}

// MessageIDKafka is the message id like kafka.
type MessageIDKafka struct {
	Offset               int64    `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageIDKafka) Reset()         { *m = MessageIDKafka{} }
func (m *MessageIDKafka) String() string { return proto.CompactTextString(m) }
func (*MessageIDKafka) ProtoMessage()    {}
func (*MessageIDKafka) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{1}
}

func (m *MessageIDKafka) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageIDKafka.Unmarshal(m, b)
}
func (m *MessageIDKafka) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageIDKafka.Marshal(b, m, deterministic)
}
func (m *MessageIDKafka) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageIDKafka.Merge(m, src)
}
func (m *MessageIDKafka) XXX_Size() int {
	return xxx_messageInfo_MessageIDKafka.Size(m)
}
func (m *MessageIDKafka) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageIDKafka.DiscardUnknown(m)
}

var xxx_messageInfo_MessageIDKafka proto.InternalMessageInfo

func (m *MessageIDKafka) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// MessageIDRmq is the message id like rocksmq.
type MessageIDRmq struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageIDRmq) Reset()         { *m = MessageIDRmq{} }
func (m *MessageIDRmq) String() string { return proto.CompactTextString(m) }
func (*MessageIDRmq) ProtoMessage()    {}
func (*MessageIDRmq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{2}
}

func (m *MessageIDRmq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageIDRmq.Unmarshal(m, b)
}
func (m *MessageIDRmq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageIDRmq.Marshal(b, m, deterministic)
}
func (m *MessageIDRmq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageIDRmq.Merge(m, src)
}
func (m *MessageIDRmq) XXX_Size() int {
	return xxx_messageInfo_MessageIDRmq.Size(m)
}
func (m *MessageIDRmq) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageIDRmq.DiscardUnknown(m)
}

var xxx_messageInfo_MessageIDRmq proto.InternalMessageInfo

func (m *MessageIDRmq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// MessageIDNmq is the message id like natsmq.
type MessageIDNmq struct {
	Offset               uint64   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageIDNmq) Reset()         { *m = MessageIDNmq{} }
func (m *MessageIDNmq) String() string { return proto.CompactTextString(m) }
func (*MessageIDNmq) ProtoMessage()    {}
func (*MessageIDNmq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{3}
}

func (m *MessageIDNmq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageIDNmq.Unmarshal(m, b)
}
func (m *MessageIDNmq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageIDNmq.Marshal(b, m, deterministic)
}
func (m *MessageIDNmq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageIDNmq.Merge(m, src)
}
func (m *MessageIDNmq) XXX_Size() int {
	return xxx_messageInfo_MessageIDNmq.Size(m)
}
func (m *MessageIDNmq) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageIDNmq.DiscardUnknown(m)
}

var xxx_messageInfo_MessageIDNmq proto.InternalMessageInfo

func (m *MessageIDNmq) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// MessageIDPulsar is the message id like pulsar.
type MessageIDPulsar struct {
	Serialized           []byte   `protobuf:"bytes,1,opt,name=serialized,proto3" json:"serialized,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageIDPulsar) Reset()         { *m = MessageIDPulsar{} }
func (m *MessageIDPulsar) String() string { return proto.CompactTextString(m) }
func (*MessageIDPulsar) ProtoMessage()    {}
func (*MessageIDPulsar) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{4}
}

func (m *MessageIDPulsar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageIDPulsar.Unmarshal(m, b)
}
func (m *MessageIDPulsar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageIDPulsar.Marshal(b, m, deterministic)
}
func (m *MessageIDPulsar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageIDPulsar.Merge(m, src)
}
func (m *MessageIDPulsar) XXX_Size() int {
	return xxx_messageInfo_MessageIDPulsar.Size(m)
}
func (m *MessageIDPulsar) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageIDPulsar.DiscardUnknown(m)
}

var xxx_messageInfo_MessageIDPulsar proto.InternalMessageInfo

func (m *MessageIDPulsar) GetSerialized() []byte {
	if m != nil {
		return m.Serialized
	}
	return nil
}

// Message is the basic unit of communication between publisher and consumer.
type Message struct {
	Payload              []byte            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Properties           map[string]string `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{5}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

// LogNodeBalancerAttributes is the balacing attribute of a log node.
type LogNodeBalancerAttributes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogNodeBalancerAttributes) Reset()         { *m = LogNodeBalancerAttributes{} }
func (m *LogNodeBalancerAttributes) String() string { return proto.CompactTextString(m) }
func (*LogNodeBalancerAttributes) ProtoMessage()    {}
func (*LogNodeBalancerAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{6}
}

func (m *LogNodeBalancerAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNodeBalancerAttributes.Unmarshal(m, b)
}
func (m *LogNodeBalancerAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNodeBalancerAttributes.Marshal(b, m, deterministic)
}
func (m *LogNodeBalancerAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNodeBalancerAttributes.Merge(m, src)
}
func (m *LogNodeBalancerAttributes) XXX_Size() int {
	return xxx_messageInfo_LogNodeBalancerAttributes.Size(m)
}
func (m *LogNodeBalancerAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNodeBalancerAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_LogNodeBalancerAttributes proto.InternalMessageInfo

// LogNodeAssignment is the assignment info of a log node.
type LogNodeAssignment struct {
	ServerID             int64           `protobuf:"varint,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	Address              string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Channels             []*PChannelInfo `protobuf:"bytes,3,rep,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LogNodeAssignment) Reset()         { *m = LogNodeAssignment{} }
func (m *LogNodeAssignment) String() string { return proto.CompactTextString(m) }
func (*LogNodeAssignment) ProtoMessage()    {}
func (*LogNodeAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{7}
}

func (m *LogNodeAssignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNodeAssignment.Unmarshal(m, b)
}
func (m *LogNodeAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNodeAssignment.Marshal(b, m, deterministic)
}
func (m *LogNodeAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNodeAssignment.Merge(m, src)
}
func (m *LogNodeAssignment) XXX_Size() int {
	return xxx_messageInfo_LogNodeAssignment.Size(m)
}
func (m *LogNodeAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNodeAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_LogNodeAssignment proto.InternalMessageInfo

func (m *LogNodeAssignment) GetServerID() int64 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

func (m *LogNodeAssignment) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LogNodeAssignment) GetChannels() []*PChannelInfo {
	if m != nil {
		return m.Channels
	}
	return nil
}

// PChannelInfo is the information of a pchannel info.
type PChannelInfo struct {
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Term                 int64           `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	ServerID             int64           `protobuf:"varint,3,opt,name=serverID,proto3" json:"serverID,omitempty"`
	VChannelInfos        []*VChannelInfo `protobuf:"bytes,4,rep,name=vChannelInfos,proto3" json:"vChannelInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PChannelInfo) Reset()         { *m = PChannelInfo{} }
func (m *PChannelInfo) String() string { return proto.CompactTextString(m) }
func (*PChannelInfo) ProtoMessage()    {}
func (*PChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{8}
}

func (m *PChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PChannelInfo.Unmarshal(m, b)
}
func (m *PChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PChannelInfo.Marshal(b, m, deterministic)
}
func (m *PChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PChannelInfo.Merge(m, src)
}
func (m *PChannelInfo) XXX_Size() int {
	return xxx_messageInfo_PChannelInfo.Size(m)
}
func (m *PChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PChannelInfo proto.InternalMessageInfo

func (m *PChannelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PChannelInfo) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *PChannelInfo) GetServerID() int64 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

func (m *PChannelInfo) GetVChannelInfos() []*VChannelInfo {
	if m != nil {
		return m.VChannelInfos
	}
	return nil
}

// VChannelInfo is the information of a vchannel info.
type VChannelInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VChannelInfo) Reset()         { *m = VChannelInfo{} }
func (m *VChannelInfo) String() string { return proto.CompactTextString(m) }
func (*VChannelInfo) ProtoMessage()    {}
func (*VChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{9}
}

func (m *VChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VChannelInfo.Unmarshal(m, b)
}
func (m *VChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VChannelInfo.Marshal(b, m, deterministic)
}
func (m *VChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VChannelInfo.Merge(m, src)
}
func (m *VChannelInfo) XXX_Size() int {
	return xxx_messageInfo_VChannelInfo.Size(m)
}
func (m *VChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VChannelInfo proto.InternalMessageInfo

func (m *VChannelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// LogError is the error type for log internal component.
type LogError struct {
	Code                 LogCode  `protobuf:"varint,1,opt,name=code,proto3,enum=milvus.proto.log.LogCode" json:"code,omitempty"`
	Cause                string   `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogError) Reset()         { *m = LogError{} }
func (m *LogError) String() string { return proto.CompactTextString(m) }
func (*LogError) ProtoMessage()    {}
func (*LogError) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{10}
}

func (m *LogError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogError.Unmarshal(m, b)
}
func (m *LogError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogError.Marshal(b, m, deterministic)
}
func (m *LogError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogError.Merge(m, src)
}
func (m *LogError) XXX_Size() int {
	return xxx_messageInfo_LogError.Size(m)
}
func (m *LogError) XXX_DiscardUnknown() {
	xxx_messageInfo_LogError.DiscardUnknown(m)
}

var xxx_messageInfo_LogError proto.InternalMessageInfo

func (m *LogError) GetCode() LogCode {
	if m != nil {
		return m.Code
	}
	return LogCode_LOG_CODE_OK
}

func (m *LogError) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

// VersionPair is the version pair of global and local.
type VersionPair struct {
	Global               int64    `protobuf:"varint,1,opt,name=global,proto3" json:"global,omitempty"`
	Local                int64    `protobuf:"varint,2,opt,name=local,proto3" json:"local,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionPair) Reset()         { *m = VersionPair{} }
func (m *VersionPair) String() string { return proto.CompactTextString(m) }
func (*VersionPair) ProtoMessage()    {}
func (*VersionPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{11}
}

func (m *VersionPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionPair.Unmarshal(m, b)
}
func (m *VersionPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionPair.Marshal(b, m, deterministic)
}
func (m *VersionPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionPair.Merge(m, src)
}
func (m *VersionPair) XXX_Size() int {
	return xxx_messageInfo_VersionPair.Size(m)
}
func (m *VersionPair) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionPair.DiscardUnknown(m)
}

var xxx_messageInfo_VersionPair proto.InternalMessageInfo

func (m *VersionPair) GetGlobal() int64 {
	if m != nil {
		return m.Global
	}
	return 0
}

func (m *VersionPair) GetLocal() int64 {
	if m != nil {
		return m.Local
	}
	return 0
}

type CreatePChannelRequest struct {
	PChannelName         string   `protobuf:"bytes,1,opt,name=pChannelName,proto3" json:"pChannelName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePChannelRequest) Reset()         { *m = CreatePChannelRequest{} }
func (m *CreatePChannelRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePChannelRequest) ProtoMessage()    {}
func (*CreatePChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{12}
}

func (m *CreatePChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePChannelRequest.Unmarshal(m, b)
}
func (m *CreatePChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePChannelRequest.Marshal(b, m, deterministic)
}
func (m *CreatePChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePChannelRequest.Merge(m, src)
}
func (m *CreatePChannelRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePChannelRequest.Size(m)
}
func (m *CreatePChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePChannelRequest proto.InternalMessageInfo

func (m *CreatePChannelRequest) GetPChannelName() string {
	if m != nil {
		return m.PChannelName
	}
	return ""
}

type CreatePChannelResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePChannelResponse) Reset()         { *m = CreatePChannelResponse{} }
func (m *CreatePChannelResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePChannelResponse) ProtoMessage()    {}
func (*CreatePChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{13}
}

func (m *CreatePChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePChannelResponse.Unmarshal(m, b)
}
func (m *CreatePChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePChannelResponse.Marshal(b, m, deterministic)
}
func (m *CreatePChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePChannelResponse.Merge(m, src)
}
func (m *CreatePChannelResponse) XXX_Size() int {
	return xxx_messageInfo_CreatePChannelResponse.Size(m)
}
func (m *CreatePChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePChannelResponse proto.InternalMessageInfo

type RemovePChannelRequest struct {
	PChannelName         string   `protobuf:"bytes,1,opt,name=pChannelName,proto3" json:"pChannelName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePChannelRequest) Reset()         { *m = RemovePChannelRequest{} }
func (m *RemovePChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePChannelRequest) ProtoMessage()    {}
func (*RemovePChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{14}
}

func (m *RemovePChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePChannelRequest.Unmarshal(m, b)
}
func (m *RemovePChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePChannelRequest.Marshal(b, m, deterministic)
}
func (m *RemovePChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePChannelRequest.Merge(m, src)
}
func (m *RemovePChannelRequest) XXX_Size() int {
	return xxx_messageInfo_RemovePChannelRequest.Size(m)
}
func (m *RemovePChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePChannelRequest proto.InternalMessageInfo

func (m *RemovePChannelRequest) GetPChannelName() string {
	if m != nil {
		return m.PChannelName
	}
	return ""
}

type RemovePChannelResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePChannelResponse) Reset()         { *m = RemovePChannelResponse{} }
func (m *RemovePChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePChannelResponse) ProtoMessage()    {}
func (*RemovePChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{15}
}

func (m *RemovePChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePChannelResponse.Unmarshal(m, b)
}
func (m *RemovePChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePChannelResponse.Marshal(b, m, deterministic)
}
func (m *RemovePChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePChannelResponse.Merge(m, src)
}
func (m *RemovePChannelResponse) XXX_Size() int {
	return xxx_messageInfo_RemovePChannelResponse.Size(m)
}
func (m *RemovePChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePChannelResponse proto.InternalMessageInfo

type CreateVChannelRequest struct {
	PChannelName         string   `protobuf:"bytes,1,opt,name=pChannelName,proto3" json:"pChannelName,omitempty"`
	VChannelName         []string `protobuf:"bytes,2,rep,name=vChannelName,proto3" json:"vChannelName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVChannelRequest) Reset()         { *m = CreateVChannelRequest{} }
func (m *CreateVChannelRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVChannelRequest) ProtoMessage()    {}
func (*CreateVChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{16}
}

func (m *CreateVChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVChannelRequest.Unmarshal(m, b)
}
func (m *CreateVChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVChannelRequest.Marshal(b, m, deterministic)
}
func (m *CreateVChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVChannelRequest.Merge(m, src)
}
func (m *CreateVChannelRequest) XXX_Size() int {
	return xxx_messageInfo_CreateVChannelRequest.Size(m)
}
func (m *CreateVChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVChannelRequest proto.InternalMessageInfo

func (m *CreateVChannelRequest) GetPChannelName() string {
	if m != nil {
		return m.PChannelName
	}
	return ""
}

func (m *CreateVChannelRequest) GetVChannelName() []string {
	if m != nil {
		return m.VChannelName
	}
	return nil
}

type CreateVChannelResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVChannelResponse) Reset()         { *m = CreateVChannelResponse{} }
func (m *CreateVChannelResponse) String() string { return proto.CompactTextString(m) }
func (*CreateVChannelResponse) ProtoMessage()    {}
func (*CreateVChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{17}
}

func (m *CreateVChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVChannelResponse.Unmarshal(m, b)
}
func (m *CreateVChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVChannelResponse.Marshal(b, m, deterministic)
}
func (m *CreateVChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVChannelResponse.Merge(m, src)
}
func (m *CreateVChannelResponse) XXX_Size() int {
	return xxx_messageInfo_CreateVChannelResponse.Size(m)
}
func (m *CreateVChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVChannelResponse proto.InternalMessageInfo

type RemoveVChannelRequest struct {
	PChannelName         string   `protobuf:"bytes,1,opt,name=pChannelName,proto3" json:"pChannelName,omitempty"`
	VChannelName         []string `protobuf:"bytes,2,rep,name=vChannelName,proto3" json:"vChannelName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveVChannelRequest) Reset()         { *m = RemoveVChannelRequest{} }
func (m *RemoveVChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveVChannelRequest) ProtoMessage()    {}
func (*RemoveVChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{18}
}

func (m *RemoveVChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveVChannelRequest.Unmarshal(m, b)
}
func (m *RemoveVChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveVChannelRequest.Marshal(b, m, deterministic)
}
func (m *RemoveVChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveVChannelRequest.Merge(m, src)
}
func (m *RemoveVChannelRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveVChannelRequest.Size(m)
}
func (m *RemoveVChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveVChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveVChannelRequest proto.InternalMessageInfo

func (m *RemoveVChannelRequest) GetPChannelName() string {
	if m != nil {
		return m.PChannelName
	}
	return ""
}

func (m *RemoveVChannelRequest) GetVChannelName() []string {
	if m != nil {
		return m.VChannelName
	}
	return nil
}

type RemoveVChannelResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveVChannelResponse) Reset()         { *m = RemoveVChannelResponse{} }
func (m *RemoveVChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveVChannelResponse) ProtoMessage()    {}
func (*RemoveVChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{19}
}

func (m *RemoveVChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveVChannelResponse.Unmarshal(m, b)
}
func (m *RemoveVChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveVChannelResponse.Marshal(b, m, deterministic)
}
func (m *RemoveVChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveVChannelResponse.Merge(m, src)
}
func (m *RemoveVChannelResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveVChannelResponse.Size(m)
}
func (m *RemoveVChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveVChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveVChannelResponse proto.InternalMessageInfo

// AssignmentDiscoverRequest is the request of Discovery
type AssignmentDiscoverRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignmentDiscoverRequest) Reset()         { *m = AssignmentDiscoverRequest{} }
func (m *AssignmentDiscoverRequest) String() string { return proto.CompactTextString(m) }
func (*AssignmentDiscoverRequest) ProtoMessage()    {}
func (*AssignmentDiscoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{20}
}

func (m *AssignmentDiscoverRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignmentDiscoverRequest.Unmarshal(m, b)
}
func (m *AssignmentDiscoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignmentDiscoverRequest.Marshal(b, m, deterministic)
}
func (m *AssignmentDiscoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentDiscoverRequest.Merge(m, src)
}
func (m *AssignmentDiscoverRequest) XXX_Size() int {
	return xxx_messageInfo_AssignmentDiscoverRequest.Size(m)
}
func (m *AssignmentDiscoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentDiscoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentDiscoverRequest proto.InternalMessageInfo

// AssignmentDiscoverResponse is the response of Discovery
type AssignmentDiscoverResponse struct {
	Version              *VersionPair         `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Addresses            []*LogNodeAssignment `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AssignmentDiscoverResponse) Reset()         { *m = AssignmentDiscoverResponse{} }
func (m *AssignmentDiscoverResponse) String() string { return proto.CompactTextString(m) }
func (*AssignmentDiscoverResponse) ProtoMessage()    {}
func (*AssignmentDiscoverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{21}
}

func (m *AssignmentDiscoverResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignmentDiscoverResponse.Unmarshal(m, b)
}
func (m *AssignmentDiscoverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignmentDiscoverResponse.Marshal(b, m, deterministic)
}
func (m *AssignmentDiscoverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentDiscoverResponse.Merge(m, src)
}
func (m *AssignmentDiscoverResponse) XXX_Size() int {
	return xxx_messageInfo_AssignmentDiscoverResponse.Size(m)
}
func (m *AssignmentDiscoverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentDiscoverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentDiscoverResponse proto.InternalMessageInfo

func (m *AssignmentDiscoverResponse) GetVersion() *VersionPair {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *AssignmentDiscoverResponse) GetAddresses() []*LogNodeAssignment {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// ReportLogErrorRequest is the request of ReportLogError
type ReportLogErrorRequest struct {
	Name                 string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Term                 int64     `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Err                  *LogError `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReportLogErrorRequest) Reset()         { *m = ReportLogErrorRequest{} }
func (m *ReportLogErrorRequest) String() string { return proto.CompactTextString(m) }
func (*ReportLogErrorRequest) ProtoMessage()    {}
func (*ReportLogErrorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{22}
}

func (m *ReportLogErrorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportLogErrorRequest.Unmarshal(m, b)
}
func (m *ReportLogErrorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportLogErrorRequest.Marshal(b, m, deterministic)
}
func (m *ReportLogErrorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportLogErrorRequest.Merge(m, src)
}
func (m *ReportLogErrorRequest) XXX_Size() int {
	return xxx_messageInfo_ReportLogErrorRequest.Size(m)
}
func (m *ReportLogErrorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportLogErrorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportLogErrorRequest proto.InternalMessageInfo

func (m *ReportLogErrorRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReportLogErrorRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ReportLogErrorRequest) GetErr() *LogError {
	if m != nil {
		return m.Err
	}
	return nil
}

// ReportLogErrorResponse is the response of ReportLogError
type ReportLogErrorResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportLogErrorResponse) Reset()         { *m = ReportLogErrorResponse{} }
func (m *ReportLogErrorResponse) String() string { return proto.CompactTextString(m) }
func (*ReportLogErrorResponse) ProtoMessage()    {}
func (*ReportLogErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{23}
}

func (m *ReportLogErrorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportLogErrorResponse.Unmarshal(m, b)
}
func (m *ReportLogErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportLogErrorResponse.Marshal(b, m, deterministic)
}
func (m *ReportLogErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportLogErrorResponse.Merge(m, src)
}
func (m *ReportLogErrorResponse) XXX_Size() int {
	return xxx_messageInfo_ReportLogErrorResponse.Size(m)
}
func (m *ReportLogErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportLogErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportLogErrorResponse proto.InternalMessageInfo

// ProduceRequest is the request of the Produce RPC.
// Channel name will be passthrough in the header of stream bu not in the request body.
type ProduceRequest struct {
	// Types that are valid to be assigned to Request:
	//
	//	*ProduceRequest_Produce
	//	*ProduceRequest_Close
	Request              isProduceRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ProduceRequest) Reset()         { *m = ProduceRequest{} }
func (m *ProduceRequest) String() string { return proto.CompactTextString(m) }
func (*ProduceRequest) ProtoMessage()    {}
func (*ProduceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{24}
}

func (m *ProduceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceRequest.Unmarshal(m, b)
}
func (m *ProduceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceRequest.Marshal(b, m, deterministic)
}
func (m *ProduceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceRequest.Merge(m, src)
}
func (m *ProduceRequest) XXX_Size() int {
	return xxx_messageInfo_ProduceRequest.Size(m)
}
func (m *ProduceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceRequest proto.InternalMessageInfo

type isProduceRequest_Request interface {
	isProduceRequest_Request()
}

type ProduceRequest_Produce struct {
	Produce *ProduceMessageRequest `protobuf:"bytes,2,opt,name=produce,proto3,oneof"`
}

type ProduceRequest_Close struct {
	Close *CloseProducerRequest `protobuf:"bytes,3,opt,name=close,proto3,oneof"`
}

func (*ProduceRequest_Produce) isProduceRequest_Request() {}

func (*ProduceRequest_Close) isProduceRequest_Request() {}

func (m *ProduceRequest) GetRequest() isProduceRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ProduceRequest) GetProduce() *ProduceMessageRequest {
	if x, ok := m.GetRequest().(*ProduceRequest_Produce); ok {
		return x.Produce
	}
	return nil
}

func (m *ProduceRequest) GetClose() *CloseProducerRequest {
	if x, ok := m.GetRequest().(*ProduceRequest_Close); ok {
		return x.Close
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProduceRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProduceRequest_Produce)(nil),
		(*ProduceRequest_Close)(nil),
	}
}

// CreateProducerRequest is the request of the CreateProducer RPC.
// CreateProducerRequest is passed in the header of stream.
type CreateProducerRequest struct {
	ChannelName          string   `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Term                 int64    `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateProducerRequest) Reset()         { *m = CreateProducerRequest{} }
func (m *CreateProducerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateProducerRequest) ProtoMessage()    {}
func (*CreateProducerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{25}
}

func (m *CreateProducerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProducerRequest.Unmarshal(m, b)
}
func (m *CreateProducerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProducerRequest.Marshal(b, m, deterministic)
}
func (m *CreateProducerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProducerRequest.Merge(m, src)
}
func (m *CreateProducerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateProducerRequest.Size(m)
}
func (m *CreateProducerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProducerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProducerRequest proto.InternalMessageInfo

func (m *CreateProducerRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *CreateProducerRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// ProduceMessageRequest is the request of the Produce RPC.
type ProduceMessageRequest struct {
	RequestID            int64    `protobuf:"varint,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Message              *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceMessageRequest) Reset()         { *m = ProduceMessageRequest{} }
func (m *ProduceMessageRequest) String() string { return proto.CompactTextString(m) }
func (*ProduceMessageRequest) ProtoMessage()    {}
func (*ProduceMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{26}
}

func (m *ProduceMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceMessageRequest.Unmarshal(m, b)
}
func (m *ProduceMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceMessageRequest.Marshal(b, m, deterministic)
}
func (m *ProduceMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceMessageRequest.Merge(m, src)
}
func (m *ProduceMessageRequest) XXX_Size() int {
	return xxx_messageInfo_ProduceMessageRequest.Size(m)
}
func (m *ProduceMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceMessageRequest proto.InternalMessageInfo

func (m *ProduceMessageRequest) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *ProduceMessageRequest) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

// CloseProducerRequest is the request of the CloseProducer RPC.
// After CloseProducerRequest is requested, no more ProduceRequest can be sent.
type CloseProducerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseProducerRequest) Reset()         { *m = CloseProducerRequest{} }
func (m *CloseProducerRequest) String() string { return proto.CompactTextString(m) }
func (*CloseProducerRequest) ProtoMessage()    {}
func (*CloseProducerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{27}
}

func (m *CloseProducerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseProducerRequest.Unmarshal(m, b)
}
func (m *CloseProducerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseProducerRequest.Marshal(b, m, deterministic)
}
func (m *CloseProducerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseProducerRequest.Merge(m, src)
}
func (m *CloseProducerRequest) XXX_Size() int {
	return xxx_messageInfo_CloseProducerRequest.Size(m)
}
func (m *CloseProducerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseProducerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseProducerRequest proto.InternalMessageInfo

// ProduceResponse is the response of the Produce RPC.
type ProduceResponse struct {
	// Types that are valid to be assigned to Response:
	//
	//	*ProduceResponse_Create
	//	*ProduceResponse_Produce
	//	*ProduceResponse_Close
	Response             isProduceResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ProduceResponse) Reset()         { *m = ProduceResponse{} }
func (m *ProduceResponse) String() string { return proto.CompactTextString(m) }
func (*ProduceResponse) ProtoMessage()    {}
func (*ProduceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{28}
}

func (m *ProduceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceResponse.Unmarshal(m, b)
}
func (m *ProduceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceResponse.Marshal(b, m, deterministic)
}
func (m *ProduceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceResponse.Merge(m, src)
}
func (m *ProduceResponse) XXX_Size() int {
	return xxx_messageInfo_ProduceResponse.Size(m)
}
func (m *ProduceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceResponse proto.InternalMessageInfo

type isProduceResponse_Response interface {
	isProduceResponse_Response()
}

type ProduceResponse_Create struct {
	Create *CreateProducerResponse `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type ProduceResponse_Produce struct {
	Produce *ProduceMessageResponse `protobuf:"bytes,2,opt,name=produce,proto3,oneof"`
}

type ProduceResponse_Close struct {
	Close *CloseProducerResponse `protobuf:"bytes,3,opt,name=close,proto3,oneof"`
}

func (*ProduceResponse_Create) isProduceResponse_Response() {}

func (*ProduceResponse_Produce) isProduceResponse_Response() {}

func (*ProduceResponse_Close) isProduceResponse_Response() {}

func (m *ProduceResponse) GetResponse() isProduceResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ProduceResponse) GetCreate() *CreateProducerResponse {
	if x, ok := m.GetResponse().(*ProduceResponse_Create); ok {
		return x.Create
	}
	return nil
}

func (m *ProduceResponse) GetProduce() *ProduceMessageResponse {
	if x, ok := m.GetResponse().(*ProduceResponse_Produce); ok {
		return x.Produce
	}
	return nil
}

func (m *ProduceResponse) GetClose() *CloseProducerResponse {
	if x, ok := m.GetResponse().(*ProduceResponse_Close); ok {
		return x.Close
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProduceResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProduceResponse_Create)(nil),
		(*ProduceResponse_Produce)(nil),
		(*ProduceResponse_Close)(nil),
	}
}

// CreateProducerResponse is the result of the CreateProducer RPC.
type CreateProducerResponse struct {
	ProducerID           int64    `protobuf:"varint,1,opt,name=producerID,proto3" json:"producerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateProducerResponse) Reset()         { *m = CreateProducerResponse{} }
func (m *CreateProducerResponse) String() string { return proto.CompactTextString(m) }
func (*CreateProducerResponse) ProtoMessage()    {}
func (*CreateProducerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{29}
}

func (m *CreateProducerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProducerResponse.Unmarshal(m, b)
}
func (m *CreateProducerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProducerResponse.Marshal(b, m, deterministic)
}
func (m *CreateProducerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProducerResponse.Merge(m, src)
}
func (m *CreateProducerResponse) XXX_Size() int {
	return xxx_messageInfo_CreateProducerResponse.Size(m)
}
func (m *CreateProducerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProducerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProducerResponse proto.InternalMessageInfo

func (m *CreateProducerResponse) GetProducerID() int64 {
	if m != nil {
		return m.ProducerID
	}
	return 0
}

type ProduceMessageResponse struct {
	RequestID int64 `protobuf:"varint,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*ProduceMessageResponse_Result
	//	*ProduceMessageResponse_Error
	Response             isProduceMessageResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ProduceMessageResponse) Reset()         { *m = ProduceMessageResponse{} }
func (m *ProduceMessageResponse) String() string { return proto.CompactTextString(m) }
func (*ProduceMessageResponse) ProtoMessage()    {}
func (*ProduceMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{30}
}

func (m *ProduceMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceMessageResponse.Unmarshal(m, b)
}
func (m *ProduceMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceMessageResponse.Marshal(b, m, deterministic)
}
func (m *ProduceMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceMessageResponse.Merge(m, src)
}
func (m *ProduceMessageResponse) XXX_Size() int {
	return xxx_messageInfo_ProduceMessageResponse.Size(m)
}
func (m *ProduceMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceMessageResponse proto.InternalMessageInfo

func (m *ProduceMessageResponse) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

type isProduceMessageResponse_Response interface {
	isProduceMessageResponse_Response()
}

type ProduceMessageResponse_Result struct {
	Result *ProduceMessageResponseResult `protobuf:"bytes,2,opt,name=result,proto3,oneof"`
}

type ProduceMessageResponse_Error struct {
	Error *LogError `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*ProduceMessageResponse_Result) isProduceMessageResponse_Response() {}

func (*ProduceMessageResponse_Error) isProduceMessageResponse_Response() {}

func (m *ProduceMessageResponse) GetResponse() isProduceMessageResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ProduceMessageResponse) GetResult() *ProduceMessageResponseResult {
	if x, ok := m.GetResponse().(*ProduceMessageResponse_Result); ok {
		return x.Result
	}
	return nil
}

func (m *ProduceMessageResponse) GetError() *LogError {
	if x, ok := m.GetResponse().(*ProduceMessageResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProduceMessageResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProduceMessageResponse_Result)(nil),
		(*ProduceMessageResponse_Error)(nil),
	}
}

// ProduceMessageResponseResult is the result of the produce message streaming RPC.
type ProduceMessageResponseResult struct {
	Id                   *MessageID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProduceMessageResponseResult) Reset()         { *m = ProduceMessageResponseResult{} }
func (m *ProduceMessageResponseResult) String() string { return proto.CompactTextString(m) }
func (*ProduceMessageResponseResult) ProtoMessage()    {}
func (*ProduceMessageResponseResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{31}
}

func (m *ProduceMessageResponseResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceMessageResponseResult.Unmarshal(m, b)
}
func (m *ProduceMessageResponseResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceMessageResponseResult.Marshal(b, m, deterministic)
}
func (m *ProduceMessageResponseResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceMessageResponseResult.Merge(m, src)
}
func (m *ProduceMessageResponseResult) XXX_Size() int {
	return xxx_messageInfo_ProduceMessageResponseResult.Size(m)
}
func (m *ProduceMessageResponseResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceMessageResponseResult.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceMessageResponseResult proto.InternalMessageInfo

func (m *ProduceMessageResponseResult) GetId() *MessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

// CloseProducerResponse is the result of the CloseProducer RPC.
type CloseProducerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseProducerResponse) Reset()         { *m = CloseProducerResponse{} }
func (m *CloseProducerResponse) String() string { return proto.CompactTextString(m) }
func (*CloseProducerResponse) ProtoMessage()    {}
func (*CloseProducerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{32}
}

func (m *CloseProducerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseProducerResponse.Unmarshal(m, b)
}
func (m *CloseProducerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseProducerResponse.Marshal(b, m, deterministic)
}
func (m *CloseProducerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseProducerResponse.Merge(m, src)
}
func (m *CloseProducerResponse) XXX_Size() int {
	return xxx_messageInfo_CloseProducerResponse.Size(m)
}
func (m *CloseProducerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseProducerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseProducerResponse proto.InternalMessageInfo

// ConsumeRequest is the request of the Consume RPC.
// Add more control block in future.
type ConsumeRequest struct {
	// Types that are valid to be assigned to Request:
	//
	//	*ConsumeRequest_Close
	Request              isConsumeRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ConsumeRequest) Reset()         { *m = ConsumeRequest{} }
func (m *ConsumeRequest) String() string { return proto.CompactTextString(m) }
func (*ConsumeRequest) ProtoMessage()    {}
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{33}
}

func (m *ConsumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeRequest.Unmarshal(m, b)
}
func (m *ConsumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeRequest.Marshal(b, m, deterministic)
}
func (m *ConsumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeRequest.Merge(m, src)
}
func (m *ConsumeRequest) XXX_Size() int {
	return xxx_messageInfo_ConsumeRequest.Size(m)
}
func (m *ConsumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeRequest proto.InternalMessageInfo

type isConsumeRequest_Request interface {
	isConsumeRequest_Request()
}

type ConsumeRequest_Close struct {
	Close *CloseConsumerRequest `protobuf:"bytes,1,opt,name=close,proto3,oneof"`
}

func (*ConsumeRequest_Close) isConsumeRequest_Request() {}

func (m *ConsumeRequest) GetRequest() isConsumeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ConsumeRequest) GetClose() *CloseConsumerRequest {
	if x, ok := m.GetRequest().(*ConsumeRequest_Close); ok {
		return x.Close
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConsumeRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConsumeRequest_Close)(nil),
	}
}

// CreateConsumerRequest is the request of the CreateConsumer RPC.
// CreateConsumerRequest is passed in the header of stream.
type CreateConsumerRequest struct {
	ChannelName          string         `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Term                 int64          `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	DeliverPolicy        *DeliverPolicy `protobuf:"bytes,3,opt,name=deliverPolicy,proto3" json:"deliverPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreateConsumerRequest) Reset()         { *m = CreateConsumerRequest{} }
func (m *CreateConsumerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateConsumerRequest) ProtoMessage()    {}
func (*CreateConsumerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{34}
}

func (m *CreateConsumerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateConsumerRequest.Unmarshal(m, b)
}
func (m *CreateConsumerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateConsumerRequest.Marshal(b, m, deterministic)
}
func (m *CreateConsumerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateConsumerRequest.Merge(m, src)
}
func (m *CreateConsumerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateConsumerRequest.Size(m)
}
func (m *CreateConsumerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateConsumerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateConsumerRequest proto.InternalMessageInfo

func (m *CreateConsumerRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *CreateConsumerRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *CreateConsumerRequest) GetDeliverPolicy() *DeliverPolicy {
	if m != nil {
		return m.DeliverPolicy
	}
	return nil
}

type DeliverPolicy struct {
	// Types that are valid to be assigned to Policy:
	//
	//	*DeliverPolicy_All
	//	*DeliverPolicy_Latest
	//	*DeliverPolicy_StartFrom
	//	*DeliverPolicy_StartAfter
	Policy               isDeliverPolicy_Policy `protobuf_oneof:"policy"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DeliverPolicy) Reset()         { *m = DeliverPolicy{} }
func (m *DeliverPolicy) String() string { return proto.CompactTextString(m) }
func (*DeliverPolicy) ProtoMessage()    {}
func (*DeliverPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{35}
}

func (m *DeliverPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeliverPolicy.Unmarshal(m, b)
}
func (m *DeliverPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeliverPolicy.Marshal(b, m, deterministic)
}
func (m *DeliverPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliverPolicy.Merge(m, src)
}
func (m *DeliverPolicy) XXX_Size() int {
	return xxx_messageInfo_DeliverPolicy.Size(m)
}
func (m *DeliverPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliverPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_DeliverPolicy proto.InternalMessageInfo

type isDeliverPolicy_Policy interface {
	isDeliverPolicy_Policy()
}

type DeliverPolicy_All struct {
	All *emptypb.Empty `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type DeliverPolicy_Latest struct {
	Latest *emptypb.Empty `protobuf:"bytes,2,opt,name=latest,proto3,oneof"`
}

type DeliverPolicy_StartFrom struct {
	StartFrom *MessageID `protobuf:"bytes,3,opt,name=startFrom,proto3,oneof"`
}

type DeliverPolicy_StartAfter struct {
	StartAfter *MessageID `protobuf:"bytes,4,opt,name=startAfter,proto3,oneof"`
}

func (*DeliverPolicy_All) isDeliverPolicy_Policy() {}

func (*DeliverPolicy_Latest) isDeliverPolicy_Policy() {}

func (*DeliverPolicy_StartFrom) isDeliverPolicy_Policy() {}

func (*DeliverPolicy_StartAfter) isDeliverPolicy_Policy() {}

func (m *DeliverPolicy) GetPolicy() isDeliverPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *DeliverPolicy) GetAll() *emptypb.Empty {
	if x, ok := m.GetPolicy().(*DeliverPolicy_All); ok {
		return x.All
	}
	return nil
}

func (m *DeliverPolicy) GetLatest() *emptypb.Empty {
	if x, ok := m.GetPolicy().(*DeliverPolicy_Latest); ok {
		return x.Latest
	}
	return nil
}

func (m *DeliverPolicy) GetStartFrom() *MessageID {
	if x, ok := m.GetPolicy().(*DeliverPolicy_StartFrom); ok {
		return x.StartFrom
	}
	return nil
}

func (m *DeliverPolicy) GetStartAfter() *MessageID {
	if x, ok := m.GetPolicy().(*DeliverPolicy_StartAfter); ok {
		return x.StartAfter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeliverPolicy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeliverPolicy_All)(nil),
		(*DeliverPolicy_Latest)(nil),
		(*DeliverPolicy_StartFrom)(nil),
		(*DeliverPolicy_StartAfter)(nil),
	}
}

// CloseConsumerRequest is the request of the CloseConsumer RPC.
// After CloseConsumerRequest is requested, no more ConsumeRequest can be sent.
type CloseConsumerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseConsumerRequest) Reset()         { *m = CloseConsumerRequest{} }
func (m *CloseConsumerRequest) String() string { return proto.CompactTextString(m) }
func (*CloseConsumerRequest) ProtoMessage()    {}
func (*CloseConsumerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{36}
}

func (m *CloseConsumerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseConsumerRequest.Unmarshal(m, b)
}
func (m *CloseConsumerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseConsumerRequest.Marshal(b, m, deterministic)
}
func (m *CloseConsumerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseConsumerRequest.Merge(m, src)
}
func (m *CloseConsumerRequest) XXX_Size() int {
	return xxx_messageInfo_CloseConsumerRequest.Size(m)
}
func (m *CloseConsumerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseConsumerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseConsumerRequest proto.InternalMessageInfo

// ConsumeResponse is the reponse of the Consume RPC.
type ConsumeResponse struct {
	// Types that are valid to be assigned to Response:
	//
	//	*ConsumeResponse_Create
	//	*ConsumeResponse_Consume
	//	*ConsumeResponse_Close
	Response             isConsumeResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ConsumeResponse) Reset()         { *m = ConsumeResponse{} }
func (m *ConsumeResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumeResponse) ProtoMessage()    {}
func (*ConsumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{37}
}

func (m *ConsumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeResponse.Unmarshal(m, b)
}
func (m *ConsumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeResponse.Marshal(b, m, deterministic)
}
func (m *ConsumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeResponse.Merge(m, src)
}
func (m *ConsumeResponse) XXX_Size() int {
	return xxx_messageInfo_ConsumeResponse.Size(m)
}
func (m *ConsumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeResponse proto.InternalMessageInfo

type isConsumeResponse_Response interface {
	isConsumeResponse_Response()
}

type ConsumeResponse_Create struct {
	Create *CreateConsumerResponse `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type ConsumeResponse_Consume struct {
	Consume *ConsumeMessageReponse `protobuf:"bytes,2,opt,name=consume,proto3,oneof"`
}

type ConsumeResponse_Close struct {
	Close *CloseConsumerResponse `protobuf:"bytes,3,opt,name=close,proto3,oneof"`
}

func (*ConsumeResponse_Create) isConsumeResponse_Response() {}

func (*ConsumeResponse_Consume) isConsumeResponse_Response() {}

func (*ConsumeResponse_Close) isConsumeResponse_Response() {}

func (m *ConsumeResponse) GetResponse() isConsumeResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ConsumeResponse) GetCreate() *CreateConsumerResponse {
	if x, ok := m.GetResponse().(*ConsumeResponse_Create); ok {
		return x.Create
	}
	return nil
}

func (m *ConsumeResponse) GetConsume() *ConsumeMessageReponse {
	if x, ok := m.GetResponse().(*ConsumeResponse_Consume); ok {
		return x.Consume
	}
	return nil
}

func (m *ConsumeResponse) GetClose() *CloseConsumerResponse {
	if x, ok := m.GetResponse().(*ConsumeResponse_Close); ok {
		return x.Close
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConsumeResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConsumeResponse_Create)(nil),
		(*ConsumeResponse_Consume)(nil),
		(*ConsumeResponse_Close)(nil),
	}
}

type CreateConsumerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateConsumerResponse) Reset()         { *m = CreateConsumerResponse{} }
func (m *CreateConsumerResponse) String() string { return proto.CompactTextString(m) }
func (*CreateConsumerResponse) ProtoMessage()    {}
func (*CreateConsumerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{38}
}

func (m *CreateConsumerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateConsumerResponse.Unmarshal(m, b)
}
func (m *CreateConsumerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateConsumerResponse.Marshal(b, m, deterministic)
}
func (m *CreateConsumerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateConsumerResponse.Merge(m, src)
}
func (m *CreateConsumerResponse) XXX_Size() int {
	return xxx_messageInfo_CreateConsumerResponse.Size(m)
}
func (m *CreateConsumerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateConsumerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateConsumerResponse proto.InternalMessageInfo

type ConsumeMessageReponse struct {
	Id                   *MessageID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              *Message   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConsumeMessageReponse) Reset()         { *m = ConsumeMessageReponse{} }
func (m *ConsumeMessageReponse) String() string { return proto.CompactTextString(m) }
func (*ConsumeMessageReponse) ProtoMessage()    {}
func (*ConsumeMessageReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{39}
}

func (m *ConsumeMessageReponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeMessageReponse.Unmarshal(m, b)
}
func (m *ConsumeMessageReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeMessageReponse.Marshal(b, m, deterministic)
}
func (m *ConsumeMessageReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeMessageReponse.Merge(m, src)
}
func (m *ConsumeMessageReponse) XXX_Size() int {
	return xxx_messageInfo_ConsumeMessageReponse.Size(m)
}
func (m *ConsumeMessageReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeMessageReponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeMessageReponse proto.InternalMessageInfo

func (m *ConsumeMessageReponse) GetId() *MessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ConsumeMessageReponse) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type CloseConsumerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseConsumerResponse) Reset()         { *m = CloseConsumerResponse{} }
func (m *CloseConsumerResponse) String() string { return proto.CompactTextString(m) }
func (*CloseConsumerResponse) ProtoMessage()    {}
func (*CloseConsumerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{40}
}

func (m *CloseConsumerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseConsumerResponse.Unmarshal(m, b)
}
func (m *CloseConsumerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseConsumerResponse.Marshal(b, m, deterministic)
}
func (m *CloseConsumerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseConsumerResponse.Merge(m, src)
}
func (m *CloseConsumerResponse) XXX_Size() int {
	return xxx_messageInfo_CloseConsumerResponse.Size(m)
}
func (m *CloseConsumerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseConsumerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseConsumerResponse proto.InternalMessageInfo

type GetLatestMessageIDRequest struct {
	ChannelName          string   `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Term                 int64    `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLatestMessageIDRequest) Reset()         { *m = GetLatestMessageIDRequest{} }
func (m *GetLatestMessageIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestMessageIDRequest) ProtoMessage()    {}
func (*GetLatestMessageIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{41}
}

func (m *GetLatestMessageIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLatestMessageIDRequest.Unmarshal(m, b)
}
func (m *GetLatestMessageIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLatestMessageIDRequest.Marshal(b, m, deterministic)
}
func (m *GetLatestMessageIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestMessageIDRequest.Merge(m, src)
}
func (m *GetLatestMessageIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetLatestMessageIDRequest.Size(m)
}
func (m *GetLatestMessageIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestMessageIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestMessageIDRequest proto.InternalMessageInfo

func (m *GetLatestMessageIDRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *GetLatestMessageIDRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type GetLatestMessageIDResponse struct {
	Id                   *MessageID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetLatestMessageIDResponse) Reset()         { *m = GetLatestMessageIDResponse{} }
func (m *GetLatestMessageIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetLatestMessageIDResponse) ProtoMessage()    {}
func (*GetLatestMessageIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{42}
}

func (m *GetLatestMessageIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLatestMessageIDResponse.Unmarshal(m, b)
}
func (m *GetLatestMessageIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLatestMessageIDResponse.Marshal(b, m, deterministic)
}
func (m *GetLatestMessageIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestMessageIDResponse.Merge(m, src)
}
func (m *GetLatestMessageIDResponse) XXX_Size() int {
	return xxx_messageInfo_GetLatestMessageIDResponse.Size(m)
}
func (m *GetLatestMessageIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestMessageIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestMessageIDResponse proto.InternalMessageInfo

func (m *GetLatestMessageIDResponse) GetId() *MessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

// LogManagerAssignRequest is the request message of Assign RPC.
type LogNodeManagerAssignRequest struct {
	Channel              *PChannelInfo `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LogNodeManagerAssignRequest) Reset()         { *m = LogNodeManagerAssignRequest{} }
func (m *LogNodeManagerAssignRequest) String() string { return proto.CompactTextString(m) }
func (*LogNodeManagerAssignRequest) ProtoMessage()    {}
func (*LogNodeManagerAssignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{43}
}

func (m *LogNodeManagerAssignRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNodeManagerAssignRequest.Unmarshal(m, b)
}
func (m *LogNodeManagerAssignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNodeManagerAssignRequest.Marshal(b, m, deterministic)
}
func (m *LogNodeManagerAssignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNodeManagerAssignRequest.Merge(m, src)
}
func (m *LogNodeManagerAssignRequest) XXX_Size() int {
	return xxx_messageInfo_LogNodeManagerAssignRequest.Size(m)
}
func (m *LogNodeManagerAssignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNodeManagerAssignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogNodeManagerAssignRequest proto.InternalMessageInfo

func (m *LogNodeManagerAssignRequest) GetChannel() *PChannelInfo {
	if m != nil {
		return m.Channel
	}
	return nil
}

type LogNodeManagerAssignResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogNodeManagerAssignResponse) Reset()         { *m = LogNodeManagerAssignResponse{} }
func (m *LogNodeManagerAssignResponse) String() string { return proto.CompactTextString(m) }
func (*LogNodeManagerAssignResponse) ProtoMessage()    {}
func (*LogNodeManagerAssignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{44}
}

func (m *LogNodeManagerAssignResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNodeManagerAssignResponse.Unmarshal(m, b)
}
func (m *LogNodeManagerAssignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNodeManagerAssignResponse.Marshal(b, m, deterministic)
}
func (m *LogNodeManagerAssignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNodeManagerAssignResponse.Merge(m, src)
}
func (m *LogNodeManagerAssignResponse) XXX_Size() int {
	return xxx_messageInfo_LogNodeManagerAssignResponse.Size(m)
}
func (m *LogNodeManagerAssignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNodeManagerAssignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogNodeManagerAssignResponse proto.InternalMessageInfo

type LogNodeManagerRemoveRequest struct {
	ChannelName          string   `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Term                 int64    `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogNodeManagerRemoveRequest) Reset()         { *m = LogNodeManagerRemoveRequest{} }
func (m *LogNodeManagerRemoveRequest) String() string { return proto.CompactTextString(m) }
func (*LogNodeManagerRemoveRequest) ProtoMessage()    {}
func (*LogNodeManagerRemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{45}
}

func (m *LogNodeManagerRemoveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNodeManagerRemoveRequest.Unmarshal(m, b)
}
func (m *LogNodeManagerRemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNodeManagerRemoveRequest.Marshal(b, m, deterministic)
}
func (m *LogNodeManagerRemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNodeManagerRemoveRequest.Merge(m, src)
}
func (m *LogNodeManagerRemoveRequest) XXX_Size() int {
	return xxx_messageInfo_LogNodeManagerRemoveRequest.Size(m)
}
func (m *LogNodeManagerRemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNodeManagerRemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogNodeManagerRemoveRequest proto.InternalMessageInfo

func (m *LogNodeManagerRemoveRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *LogNodeManagerRemoveRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type LogNodeManagerRemoveResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogNodeManagerRemoveResponse) Reset()         { *m = LogNodeManagerRemoveResponse{} }
func (m *LogNodeManagerRemoveResponse) String() string { return proto.CompactTextString(m) }
func (*LogNodeManagerRemoveResponse) ProtoMessage()    {}
func (*LogNodeManagerRemoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{46}
}

func (m *LogNodeManagerRemoveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNodeManagerRemoveResponse.Unmarshal(m, b)
}
func (m *LogNodeManagerRemoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNodeManagerRemoveResponse.Marshal(b, m, deterministic)
}
func (m *LogNodeManagerRemoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNodeManagerRemoveResponse.Merge(m, src)
}
func (m *LogNodeManagerRemoveResponse) XXX_Size() int {
	return xxx_messageInfo_LogNodeManagerRemoveResponse.Size(m)
}
func (m *LogNodeManagerRemoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNodeManagerRemoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogNodeManagerRemoveResponse proto.InternalMessageInfo

type LogNodeManagerCollectStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogNodeManagerCollectStatusRequest) Reset()         { *m = LogNodeManagerCollectStatusRequest{} }
func (m *LogNodeManagerCollectStatusRequest) String() string { return proto.CompactTextString(m) }
func (*LogNodeManagerCollectStatusRequest) ProtoMessage()    {}
func (*LogNodeManagerCollectStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{47}
}

func (m *LogNodeManagerCollectStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNodeManagerCollectStatusRequest.Unmarshal(m, b)
}
func (m *LogNodeManagerCollectStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNodeManagerCollectStatusRequest.Marshal(b, m, deterministic)
}
func (m *LogNodeManagerCollectStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNodeManagerCollectStatusRequest.Merge(m, src)
}
func (m *LogNodeManagerCollectStatusRequest) XXX_Size() int {
	return xxx_messageInfo_LogNodeManagerCollectStatusRequest.Size(m)
}
func (m *LogNodeManagerCollectStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNodeManagerCollectStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogNodeManagerCollectStatusRequest proto.InternalMessageInfo

type LogNodeManagerCollectStatusResponse struct {
	BalancerAttributes   *LogNodeBalancerAttributes `protobuf:"bytes,1,opt,name=balancerAttributes,proto3" json:"balancerAttributes,omitempty"`
	Channels             []*PChannelInfo            `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LogNodeManagerCollectStatusResponse) Reset()         { *m = LogNodeManagerCollectStatusResponse{} }
func (m *LogNodeManagerCollectStatusResponse) String() string { return proto.CompactTextString(m) }
func (*LogNodeManagerCollectStatusResponse) ProtoMessage()    {}
func (*LogNodeManagerCollectStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{48}
}

func (m *LogNodeManagerCollectStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNodeManagerCollectStatusResponse.Unmarshal(m, b)
}
func (m *LogNodeManagerCollectStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNodeManagerCollectStatusResponse.Marshal(b, m, deterministic)
}
func (m *LogNodeManagerCollectStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNodeManagerCollectStatusResponse.Merge(m, src)
}
func (m *LogNodeManagerCollectStatusResponse) XXX_Size() int {
	return xxx_messageInfo_LogNodeManagerCollectStatusResponse.Size(m)
}
func (m *LogNodeManagerCollectStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNodeManagerCollectStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogNodeManagerCollectStatusResponse proto.InternalMessageInfo

func (m *LogNodeManagerCollectStatusResponse) GetBalancerAttributes() *LogNodeBalancerAttributes {
	if m != nil {
		return m.BalancerAttributes
	}
	return nil
}

func (m *LogNodeManagerCollectStatusResponse) GetChannels() []*PChannelInfo {
	if m != nil {
		return m.Channels
	}
	return nil
}

func init() {
	proto.RegisterEnum("milvus.proto.log.LogCode", LogCode_name, LogCode_value)
	proto.RegisterType((*MessageID)(nil), "milvus.proto.log.MessageID")
	proto.RegisterType((*MessageIDKafka)(nil), "milvus.proto.log.MessageIDKafka")
	proto.RegisterType((*MessageIDRmq)(nil), "milvus.proto.log.MessageIDRmq")
	proto.RegisterType((*MessageIDNmq)(nil), "milvus.proto.log.MessageIDNmq")
	proto.RegisterType((*MessageIDPulsar)(nil), "milvus.proto.log.MessageIDPulsar")
	proto.RegisterType((*Message)(nil), "milvus.proto.log.Message")
	proto.RegisterMapType((map[string]string)(nil), "milvus.proto.log.Message.PropertiesEntry")
	proto.RegisterType((*LogNodeBalancerAttributes)(nil), "milvus.proto.log.LogNodeBalancerAttributes")
	proto.RegisterType((*LogNodeAssignment)(nil), "milvus.proto.log.LogNodeAssignment")
	proto.RegisterType((*PChannelInfo)(nil), "milvus.proto.log.PChannelInfo")
	proto.RegisterType((*VChannelInfo)(nil), "milvus.proto.log.VChannelInfo")
	proto.RegisterType((*LogError)(nil), "milvus.proto.log.LogError")
	proto.RegisterType((*VersionPair)(nil), "milvus.proto.log.VersionPair")
	proto.RegisterType((*CreatePChannelRequest)(nil), "milvus.proto.log.CreatePChannelRequest")
	proto.RegisterType((*CreatePChannelResponse)(nil), "milvus.proto.log.CreatePChannelResponse")
	proto.RegisterType((*RemovePChannelRequest)(nil), "milvus.proto.log.RemovePChannelRequest")
	proto.RegisterType((*RemovePChannelResponse)(nil), "milvus.proto.log.RemovePChannelResponse")
	proto.RegisterType((*CreateVChannelRequest)(nil), "milvus.proto.log.CreateVChannelRequest")
	proto.RegisterType((*CreateVChannelResponse)(nil), "milvus.proto.log.CreateVChannelResponse")
	proto.RegisterType((*RemoveVChannelRequest)(nil), "milvus.proto.log.RemoveVChannelRequest")
	proto.RegisterType((*RemoveVChannelResponse)(nil), "milvus.proto.log.RemoveVChannelResponse")
	proto.RegisterType((*AssignmentDiscoverRequest)(nil), "milvus.proto.log.AssignmentDiscoverRequest")
	proto.RegisterType((*AssignmentDiscoverResponse)(nil), "milvus.proto.log.AssignmentDiscoverResponse")
	proto.RegisterType((*ReportLogErrorRequest)(nil), "milvus.proto.log.ReportLogErrorRequest")
	proto.RegisterType((*ReportLogErrorResponse)(nil), "milvus.proto.log.ReportLogErrorResponse")
	proto.RegisterType((*ProduceRequest)(nil), "milvus.proto.log.ProduceRequest")
	proto.RegisterType((*CreateProducerRequest)(nil), "milvus.proto.log.CreateProducerRequest")
	proto.RegisterType((*ProduceMessageRequest)(nil), "milvus.proto.log.ProduceMessageRequest")
	proto.RegisterType((*CloseProducerRequest)(nil), "milvus.proto.log.CloseProducerRequest")
	proto.RegisterType((*ProduceResponse)(nil), "milvus.proto.log.ProduceResponse")
	proto.RegisterType((*CreateProducerResponse)(nil), "milvus.proto.log.CreateProducerResponse")
	proto.RegisterType((*ProduceMessageResponse)(nil), "milvus.proto.log.ProduceMessageResponse")
	proto.RegisterType((*ProduceMessageResponseResult)(nil), "milvus.proto.log.ProduceMessageResponseResult")
	proto.RegisterType((*CloseProducerResponse)(nil), "milvus.proto.log.CloseProducerResponse")
	proto.RegisterType((*ConsumeRequest)(nil), "milvus.proto.log.ConsumeRequest")
	proto.RegisterType((*CreateConsumerRequest)(nil), "milvus.proto.log.CreateConsumerRequest")
	proto.RegisterType((*DeliverPolicy)(nil), "milvus.proto.log.DeliverPolicy")
	proto.RegisterType((*CloseConsumerRequest)(nil), "milvus.proto.log.CloseConsumerRequest")
	proto.RegisterType((*ConsumeResponse)(nil), "milvus.proto.log.ConsumeResponse")
	proto.RegisterType((*CreateConsumerResponse)(nil), "milvus.proto.log.CreateConsumerResponse")
	proto.RegisterType((*ConsumeMessageReponse)(nil), "milvus.proto.log.ConsumeMessageReponse")
	proto.RegisterType((*CloseConsumerResponse)(nil), "milvus.proto.log.CloseConsumerResponse")
	proto.RegisterType((*GetLatestMessageIDRequest)(nil), "milvus.proto.log.GetLatestMessageIDRequest")
	proto.RegisterType((*GetLatestMessageIDResponse)(nil), "milvus.proto.log.GetLatestMessageIDResponse")
	proto.RegisterType((*LogNodeManagerAssignRequest)(nil), "milvus.proto.log.LogNodeManagerAssignRequest")
	proto.RegisterType((*LogNodeManagerAssignResponse)(nil), "milvus.proto.log.LogNodeManagerAssignResponse")
	proto.RegisterType((*LogNodeManagerRemoveRequest)(nil), "milvus.proto.log.LogNodeManagerRemoveRequest")
	proto.RegisterType((*LogNodeManagerRemoveResponse)(nil), "milvus.proto.log.LogNodeManagerRemoveResponse")
	proto.RegisterType((*LogNodeManagerCollectStatusRequest)(nil), "milvus.proto.log.LogNodeManagerCollectStatusRequest")
	proto.RegisterType((*LogNodeManagerCollectStatusResponse)(nil), "milvus.proto.log.LogNodeManagerCollectStatusResponse")
}

func init() { proto.RegisterFile("log.proto", fileDescriptor_a153da538f858886) }

var fileDescriptor_a153da538f858886 = []byte{
	// 1825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x4f, 0x6f, 0xe3, 0xc6,
	0x15, 0x17, 0x25, 0x5b, 0xb2, 0x9e, 0xbd, 0xb6, 0x3a, 0xb5, 0x1d, 0x59, 0x76, 0x1d, 0x87, 0x1b,
	0x64, 0xdd, 0x24, 0x2b, 0xbb, 0x4a, 0x8b, 0x1a, 0x31, 0xd2, 0x42, 0x96, 0xb8, 0x96, 0x60, 0x9b,
	0xf2, 0xd2, 0x5a, 0xa5, 0x68, 0x0e, 0x02, 0x2d, 0x8d, 0x15, 0x76, 0x49, 0x8e, 0x3c, 0xa4, 0x04,
	0xb8, 0x87, 0x5e, 0xda, 0x7e, 0x83, 0x1e, 0x7a, 0xec, 0x17, 0xe8, 0xa1, 0x40, 0xd1, 0x63, 0xd1,
	0x6f, 0x93, 0x5e, 0x0a, 0x14, 0xe8, 0xa1, 0xd7, 0x82, 0x9c, 0x21, 0x25, 0x92, 0x23, 0xc9, 0xde,
	0xa0, 0xc8, 0x8d, 0x33, 0xf3, 0x7b, 0xff, 0xdf, 0x9b, 0x79, 0x4f, 0x82, 0xbc, 0x49, 0x06, 0xe5,
	0x21, 0x25, 0x2e, 0x41, 0x05, 0xcb, 0x30, 0xc7, 0x23, 0x87, 0xad, 0xca, 0x26, 0x19, 0x94, 0xd6,
	0xa6, 0x77, 0x4a, 0xbb, 0x03, 0x42, 0x06, 0x26, 0x3e, 0xf2, 0x57, 0xb7, 0xa3, 0xbb, 0x23, 0x6c,
	0x0d, 0xdd, 0x07, 0x76, 0x28, 0xff, 0x5b, 0x82, 0xfc, 0x15, 0x76, 0x1c, 0x7d, 0x80, 0x9b, 0x75,
	0x74, 0x02, 0xcb, 0x6f, 0xf5, 0xbb, 0xb7, 0x7a, 0x51, 0x3a, 0x90, 0x0e, 0x57, 0x2b, 0x07, 0xe5,
	0x38, 0xeb, 0x72, 0x88, 0xbd, 0xf0, 0x70, 0x8d, 0x94, 0xc6, 0x08, 0xd0, 0x29, 0x64, 0x87, 0x23,
	0xd3, 0xd1, 0x69, 0x31, 0xed, 0x93, 0x7e, 0x30, 0x87, 0xf4, 0xda, 0x07, 0x36, 0x52, 0x1a, 0x27,
	0x41, 0x15, 0xc8, 0x50, 0xeb, 0xbe, 0x98, 0xf1, 0x29, 0xf7, 0xe7, 0x50, 0x6a, 0xd6, 0x7d, 0x23,
	0xa5, 0x79, 0x60, 0x8f, 0xc6, 0xb6, 0xee, 0x8b, 0x4b, 0x0b, 0x69, 0x54, 0x46, 0x63, 0x5b, 0xf7,
	0x67, 0x4b, 0x90, 0x36, 0xfa, 0xf2, 0x21, 0xac, 0x47, 0xad, 0x40, 0xdb, 0x90, 0x6d, 0xdd, 0xdd,
	0x39, 0xd8, 0xf5, 0xed, 0xce, 0x68, 0x7c, 0x25, 0x7f, 0x04, 0x6b, 0xd3, 0xa2, 0x3d, 0x1c, 0x89,
	0xe0, 0x48, 0x12, 0xa7, 0x26, 0x70, 0x4b, 0x21, 0xee, 0x47, 0xb0, 0x11, 0x73, 0x02, 0xda, 0x07,
	0x70, 0x30, 0x35, 0x74, 0xd3, 0xf8, 0x35, 0xee, 0xfb, 0xf0, 0x35, 0x6d, 0x6a, 0x47, 0xfe, 0xb3,
	0x04, 0x39, 0x4e, 0x83, 0x8a, 0x90, 0x1b, 0xea, 0x0f, 0x26, 0xd1, 0x03, 0x60, 0xb0, 0x44, 0x4d,
	0x80, 0x21, 0x25, 0x43, 0x4c, 0x5d, 0x03, 0x3b, 0xc5, 0xf4, 0x41, 0xe6, 0x70, 0xb5, 0xf2, 0xc3,
	0x99, 0x3e, 0x29, 0x5f, 0x87, 0x58, 0xc5, 0x76, 0xe9, 0x83, 0x36, 0x45, 0x5c, 0xfa, 0x02, 0x36,
	0x62, 0xc7, 0xa8, 0x00, 0x99, 0xb7, 0xf8, 0xc1, 0x97, 0x99, 0xd7, 0xbc, 0x4f, 0xb4, 0x09, 0xcb,
	0x63, 0xdd, 0x1c, 0x61, 0x3f, 0xd8, 0x79, 0x8d, 0x2d, 0x3e, 0x4f, 0x9f, 0x48, 0xf2, 0x2e, 0xec,
	0x5c, 0x92, 0x81, 0x4a, 0xfa, 0xf8, 0x4c, 0x37, 0x75, 0xbb, 0x87, 0x69, 0xd5, 0x75, 0xa9, 0x71,
	0x3b, 0x72, 0xb1, 0x23, 0xff, 0x5e, 0x82, 0xef, 0xf1, 0xd3, 0xaa, 0xe3, 0x18, 0x03, 0xdb, 0xc2,
	0xb6, 0x8b, 0x4a, 0xb0, 0xe2, 0x60, 0x3a, 0xc6, 0xb4, 0x59, 0xe7, 0x7e, 0x0d, 0xd7, 0x9e, 0xc9,
	0x7a, 0xbf, 0x4f, 0xb1, 0xe3, 0x70, 0x51, 0xc1, 0x12, 0x7d, 0x0e, 0x2b, 0xbd, 0xaf, 0x75, 0xdb,
	0xc6, 0xa6, 0x53, 0xcc, 0xf8, 0x06, 0x0b, 0x92, 0xe0, 0xba, 0xc6, 0x20, 0x4d, 0xfb, 0x8e, 0x68,
	0x21, 0x5e, 0xfe, 0xa3, 0x04, 0x6b, 0xd3, 0x47, 0x08, 0xc1, 0x92, 0xad, 0x5b, 0x98, 0x9b, 0xe8,
	0x7f, 0x7b, 0x7b, 0x2e, 0xa6, 0x96, 0x2f, 0x37, 0xa3, 0xf9, 0xdf, 0x11, 0x55, 0x33, 0x31, 0x55,
	0xeb, 0xf0, 0x6c, 0x3c, 0xc5, 0xd3, 0x29, 0x2e, 0xcd, 0xd2, 0xaa, 0x33, 0xad, 0x55, 0x94, 0x48,
	0x96, 0x61, 0xad, 0xb3, 0x40, 0x33, 0xb9, 0x05, 0x2b, 0x97, 0x64, 0xa0, 0x50, 0x4a, 0x28, 0x7a,
	0x09, 0x4b, 0x3d, 0xd2, 0x67, 0xe7, 0xeb, 0x95, 0x9d, 0xa4, 0xb0, 0x4b, 0x32, 0xa8, 0x91, 0x3e,
	0xd6, 0x7c, 0x98, 0x17, 0xb8, 0x9e, 0x3e, 0x72, 0xc2, 0xc0, 0xf9, 0x0b, 0xf9, 0x14, 0x56, 0x3b,
	0x98, 0x3a, 0x06, 0xb1, 0xaf, 0x75, 0x83, 0x7a, 0xe9, 0x3b, 0x30, 0xc9, 0xad, 0x6e, 0x06, 0x69,
	0xce, 0x56, 0x1e, 0xb1, 0x49, 0x7a, 0xba, 0xc9, 0x5d, 0xc2, 0x16, 0xf2, 0x29, 0x6c, 0xd5, 0x28,
	0xd6, 0x5d, 0x1c, 0x78, 0x54, 0xc3, 0xf7, 0x23, 0xec, 0xb8, 0x48, 0x86, 0xb5, 0x21, 0xdf, 0x52,
	0x27, 0x26, 0x44, 0xf6, 0xe4, 0x22, 0x6c, 0xc7, 0x89, 0x9d, 0x21, 0xb1, 0x7d, 0x9d, 0xb6, 0x34,
	0x6c, 0x91, 0xf1, 0xbb, 0xb2, 0x8d, 0x13, 0x73, 0xb6, 0xdd, 0x40, 0xdb, 0xce, 0xd3, 0xd9, 0x7a,
	0x98, 0xf1, 0x34, 0xc6, 0x2b, 0xb4, 0xbc, 0x16, 0xd9, 0x9b, 0x58, 0xd4, 0x11, 0x88, 0x66, 0x4a,
	0xfd, 0x1f, 0x45, 0xc7, 0x05, 0x70, 0xd1, 0xbb, 0xb0, 0x33, 0x29, 0xb8, 0xba, 0xe1, 0xf4, 0xc8,
	0x18, 0x53, 0x2e, 0xde, 0xab, 0x86, 0x92, 0xe8, 0x94, 0xd1, 0xa2, 0x9f, 0x42, 0x6e, 0xcc, 0x92,
	0x83, 0xbf, 0x0a, 0x3f, 0x10, 0x64, 0xf4, 0x24, 0x7b, 0xb4, 0x00, 0x8d, 0xaa, 0x90, 0xe7, 0xc5,
	0x1a, 0xde, 0x49, 0xcf, 0x85, 0xf9, 0x19, 0xbd, 0x0f, 0xb4, 0x09, 0x95, 0x6c, 0x79, 0x2e, 0x1b,
	0x12, 0xea, 0x06, 0xf9, 0x1e, 0xb8, 0xec, 0xb1, 0x05, 0xfb, 0x29, 0x64, 0x30, 0xa5, 0xfc, 0x65,
	0x29, 0x09, 0xa5, 0x33, 0xbe, 0x1e, 0x8c, 0x39, 0x30, 0x2a, 0x8e, 0x3b, 0xf0, 0x4f, 0x12, 0xac,
	0x5f, 0x53, 0xd2, 0x1f, 0xf5, 0x70, 0xa0, 0x42, 0x0d, 0x72, 0x43, 0xb6, 0xc3, 0x9f, 0xbc, 0x17,
	0x82, 0xfb, 0x87, 0x01, 0xf8, 0xbd, 0xcb, 0x29, 0x1b, 0x29, 0x2d, 0xa0, 0x44, 0x3f, 0x83, 0xe5,
	0x9e, 0x49, 0x1c, 0xcc, 0x35, 0xfc, 0x28, 0xc9, 0xa2, 0xe6, 0x1d, 0x73, 0x3e, 0x74, 0xc2, 0x81,
	0x91, 0x9d, 0xe5, 0x21, 0x47, 0x79, 0x18, 0xaf, 0xc2, 0x3a, 0x8c, 0x82, 0xd1, 0x01, 0xac, 0xf6,
	0x12, 0xd9, 0x35, 0xbd, 0x25, 0xf2, 0x9c, 0xfc, 0x2b, 0xd8, 0x12, 0x6a, 0x8f, 0xf6, 0x20, 0xcf,
	0x45, 0x86, 0xf7, 0xf5, 0x64, 0x03, 0x7d, 0x06, 0x39, 0x8b, 0xe1, 0xb9, 0x57, 0x76, 0x66, 0x3e,
	0x43, 0x5a, 0x80, 0x94, 0xb7, 0x61, 0x53, 0x64, 0xa6, 0xfc, 0x4f, 0xc9, 0x7f, 0x8c, 0x98, 0xd7,
	0x79, 0x3a, 0x9e, 0x41, 0xb6, 0xe7, 0x9b, 0xc9, 0xb3, 0xf1, 0x50, 0xe0, 0xb2, 0x98, 0x1b, 0x18,
	0xa5, 0xd7, 0x6f, 0x30, 0x4a, 0x54, 0x8f, 0x87, 0xee, 0x70, 0x71, 0xe8, 0x42, 0x26, 0x61, 0xec,
	0x7e, 0x1e, 0x8d, 0xdd, 0x8b, 0x85, 0xb1, 0x0b, 0x59, 0xf0, 0xe0, 0x01, 0xac, 0xd0, 0x20, 0xc1,
	0x4e, 0xc2, 0x8b, 0x30, 0x06, 0xf7, 0x3a, 0x04, 0x2e, 0x71, 0xf2, 0x40, 0x4e, 0xed, 0xc8, 0xff,
	0x90, 0x60, 0x5b, 0xac, 0xec, 0x82, 0x50, 0x35, 0x20, 0x4b, 0xb1, 0x33, 0x32, 0x5d, 0xee, 0x84,
	0xf2, 0x63, 0x9d, 0xa0, 0xf9, 0x54, 0x9e, 0x3f, 0x19, 0x3d, 0xaa, 0xc0, 0x32, 0xf6, 0xca, 0x65,
	0x71, 0x9d, 0x79, 0xc6, 0xfb, 0xd0, 0x88, 0xf1, 0x17, 0xb0, 0x37, 0x4f, 0x12, 0xfa, 0xc4, 0xeb,
	0xdb, 0x78, 0xbc, 0x77, 0xe7, 0xb5, 0x87, 0x5e, 0x7b, 0xf7, 0x1e, 0x6c, 0x09, 0xfd, 0x2e, 0x7f,
	0x05, 0xeb, 0x35, 0x62, 0x3b, 0x23, 0x2b, 0x4c, 0xe5, 0xb0, 0xfa, 0xa4, 0xb9, 0xd5, 0xc7, 0xa9,
	0xe6, 0x56, 0xdf, 0x1f, 0xa4, 0xa0, 0xfc, 0x62, 0xe8, 0x77, 0x2b, 0x3f, 0xa4, 0xc0, 0xb3, 0x3e,
	0x36, 0x8d, 0x31, 0xa6, 0xd7, 0xc4, 0x34, 0x7a, 0x0f, 0xdc, 0xb5, 0xef, 0x27, 0x55, 0xac, 0x4f,
	0xc3, 0xb4, 0x28, 0x95, 0xfc, 0x1f, 0x09, 0x9e, 0x45, 0x00, 0xe8, 0x63, 0xc8, 0xe8, 0xa6, 0xc9,
	0x2d, 0xde, 0x2e, 0xb3, 0xd9, 0xa0, 0x1c, 0xcc, 0x06, 0x65, 0xc5, 0x9b, 0x0d, 0xbc, 0x7e, 0x59,
	0x37, 0x4d, 0x74, 0x0c, 0x59, 0x53, 0x77, 0xb1, 0x13, 0x64, 0xc8, 0x6c, 0x38, 0xc7, 0xa1, 0x53,
	0xc8, 0x3b, 0xae, 0x4e, 0xdd, 0x57, 0x94, 0x58, 0x5c, 0xe5, 0x79, 0x01, 0x6b, 0xa4, 0xb4, 0x09,
	0x1e, 0x7d, 0x01, 0xe0, 0x2f, 0xaa, 0x77, 0x2e, 0xa6, 0xbc, 0xb3, 0x5f, 0x40, 0x3d, 0x45, 0x70,
	0xb6, 0x02, 0xd9, 0x21, 0xb3, 0x3a, 0xb8, 0x4f, 0x62, 0xa1, 0x90, 0xbf, 0x91, 0x60, 0x23, 0x4c,
	0x81, 0xa7, 0xde, 0x27, 0x13, 0x66, 0x89, 0xfb, 0xa4, 0x06, 0xb9, 0x1e, 0x3b, 0x9d, 0xfd, 0x14,
	0x70, 0xf2, 0x30, 0xc1, 0xc3, 0xeb, 0x84, 0x53, 0x3e, 0xf6, 0x3a, 0x11, 0xa8, 0x21, 0xb8, 0x4e,
	0xc2, 0x2e, 0x24, 0x0e, 0x97, 0x1f, 0x60, 0x4b, 0xa8, 0xca, 0x93, 0x8a, 0xec, 0xdd, 0xae, 0xf9,
	0xa0, 0x32, 0x13, 0x3a, 0xbd, 0x86, 0x9d, 0x73, 0xec, 0x5e, 0xfa, 0x29, 0x34, 0x91, 0xf3, 0xad,
	0x9e, 0xaf, 0x26, 0x94, 0x44, 0x2c, 0x9d, 0xa7, 0xdb, 0x2a, 0x7f, 0x09, 0xbb, 0xbc, 0x49, 0xb9,
	0xd2, 0x6d, 0x7d, 0x80, 0x29, 0xeb, 0x55, 0x02, 0xfd, 0x4e, 0x20, 0xc7, 0x95, 0xe1, 0x0c, 0x17,
	0xcd, 0x21, 0x01, 0x5c, 0xde, 0x87, 0x3d, 0x31, 0x63, 0xee, 0x96, 0x9b, 0xb8, 0x60, 0xd6, 0xdd,
	0x7d, 0x3b, 0xc7, 0x24, 0x84, 0x06, 0x4c, 0xb9, 0xd0, 0x0f, 0x41, 0x8e, 0x9e, 0xd7, 0x88, 0x69,
	0xe2, 0x9e, 0x7b, 0xe3, 0xea, 0xee, 0xc8, 0x09, 0x2a, 0xe9, 0xef, 0x12, 0x3c, 0x9f, 0x0b, 0xe3,
	0x8e, 0xfe, 0x0a, 0xd0, 0x6d, 0x62, 0x0e, 0xe4, 0x7e, 0xfa, 0x64, 0x66, 0x33, 0x98, 0x1c, 0x1d,
	0x35, 0x01, 0x9b, 0xc8, 0x08, 0x98, 0x7e, 0xda, 0x08, 0xf8, 0xf1, 0x5f, 0xd2, 0x90, 0xe3, 0xa3,
	0x11, 0xda, 0x80, 0xd5, 0xcb, 0xd6, 0x79, 0xb7, 0xd6, 0xaa, 0x2b, 0xdd, 0xd6, 0x45, 0x21, 0x85,
	0x4a, 0xb0, 0x1d, 0x6e, 0xd4, 0x1a, 0x55, 0x55, 0x55, 0x2e, 0xbb, 0xca, 0x2f, 0x9a, 0x37, 0xed,
	0x82, 0x84, 0xf6, 0xa1, 0x94, 0x38, 0x53, 0x5b, 0x6d, 0x7e, 0x9e, 0x46, 0xbb, 0xf0, 0x5e, 0xe2,
	0xfc, 0x95, 0xa2, 0xd6, 0x94, 0x7a, 0x21, 0x83, 0x8a, 0xb0, 0x39, 0x91, 0xa4, 0x76, 0x6f, 0x1a,
	0x6f, 0xda, 0xf5, 0xd6, 0x97, 0x6a, 0x61, 0x09, 0x1d, 0xc0, 0x5e, 0x78, 0xd2, 0x54, 0x3b, 0xd5,
	0xcb, 0x66, 0xbd, 0xab, 0x29, 0xaf, 0xdf, 0x28, 0x37, 0xed, 0xee, 0x8d, 0xf2, 0xba, 0xb0, 0x8c,
	0x9e, 0xc3, 0xfb, 0x21, 0xe2, 0x8d, 0x7a, 0x55, 0x6d, 0xd7, 0x1a, 0x4a, 0x3d, 0x14, 0xd1, 0x56,
	0xb4, 0xab, 0x42, 0x36, 0xa2, 0x5d, 0xf3, 0x5c, 0x6d, 0x69, 0x4a, 0xbd, 0xdb, 0xba, 0x56, 0xb4,
	0x6a, 0xbb, 0xd9, 0x52, 0x0b, 0x39, 0x84, 0x60, 0x7d, 0x4a, 0x8c, 0xaa, 0x68, 0x85, 0x15, 0x54,
	0x80, 0xb5, 0x70, 0x4f, 0x69, 0xbd, 0x2a, 0xe4, 0xd1, 0x16, 0x14, 0xa6, 0x44, 0x5d, 0xa8, 0x9e,
	0x8a, 0xdf, 0xe4, 0x2a, 0xbf, 0x93, 0x60, 0xd3, 0xf7, 0x19, 0xa1, 0x7d, 0x2f, 0xce, 0xf8, 0x06,
	0xd3, 0xb1, 0xd1, 0xc3, 0xc8, 0x04, 0x74, 0x8e, 0xdd, 0x1a, 0xb1, 0x86, 0xc4, 0xc6, 0xb6, 0x9f,
	0x03, 0xd8, 0x41, 0xb1, 0x7e, 0x82, 0x2f, 0x92, 0x40, 0x9e, 0x53, 0xa5, 0x0f, 0x85, 0xf8, 0x18,
	0x58, 0x4e, 0x55, 0x7e, 0x2b, 0xc1, 0xf7, 0x79, 0xa2, 0x7c, 0x87, 0x5a, 0xfc, 0x35, 0x03, 0xdb,
	0x81, 0x33, 0x78, 0x8a, 0x05, 0x8a, 0x60, 0x58, 0x8f, 0x0e, 0xb5, 0xe8, 0xc5, 0xcc, 0x26, 0x35,
	0x3a, 0x0a, 0x96, 0x0e, 0x17, 0x03, 0x79, 0x9d, 0xa6, 0x3c, 0x31, 0xd1, 0x21, 0x57, 0x24, 0x46,
	0x38, 0x43, 0x8b, 0xc4, 0xcc, 0x98, 0x97, 0x53, 0x13, 0x6b, 0x3a, 0x0b, 0xad, 0xe9, 0x3c, 0xd6,
	0x9a, 0xce, 0x1c, 0x6b, 0x3a, 0x0b, 0xad, 0xe9, 0x3c, 0xd6, 0x9a, 0xa4, 0x98, 0xca, 0x7f, 0x25,
	0xff, 0x07, 0x2a, 0x3f, 0x6c, 0x93, 0x99, 0x33, 0x88, 0x9c, 0x03, 0x28, 0x39, 0x09, 0x23, 0xc1,
	0x45, 0x35, 0x73, 0x9a, 0x2e, 0x7d, 0xfa, 0x38, 0x70, 0xa0, 0xd0, 0xb1, 0xc4, 0x2c, 0x9f, 0x9e,
	0x3a, 0xc5, 0x96, 0x0b, 0xc6, 0x60, 0xb1, 0xe5, 0xc2, 0x01, 0x36, 0x55, 0xf9, 0x5b, 0x1a, 0xb6,
	0x78, 0xd9, 0x34, 0x74, 0xbb, 0x6f, 0x62, 0x1a, 0x58, 0xdd, 0x86, 0x1c, 0x6f, 0x96, 0xd1, 0xc1,
	0xcc, 0x19, 0x20, 0x10, 0xf9, 0xc1, 0x1c, 0x44, 0x20, 0xeb, 0x50, 0x3a, 0x96, 0x3c, 0xae, 0xfc,
	0xa1, 0x17, 0x71, 0x8d, 0x76, 0xe2, 0x22, 0xae, 0xb1, 0x46, 0x8d, 0x73, 0xbd, 0xf7, 0x8b, 0x3c,
	0xf6, 0xae, 0x8b, 0x22, 0x34, 0xb3, 0xa1, 0x10, 0x45, 0x68, 0x76, 0xab, 0x20, 0xa7, 0x2a, 0xff,
	0x9a, 0x38, 0x8e, 0xbf, 0x75, 0x81, 0xe3, 0x0c, 0xc8, 0xb2, 0xd8, 0xa2, 0x97, 0x33, 0xdf, 0x32,
	0x51, 0xcf, 0x50, 0x2a, 0x3f, 0x16, 0x1e, 0x96, 0x87, 0x01, 0x59, 0x96, 0xd3, 0x8b, 0x45, 0x45,
	0xba, 0x84, 0xc5, 0xa2, 0x62, 0xef, 0x7f, 0x0a, 0xfd, 0x06, 0x9e, 0x45, 0x1e, 0x73, 0xf4, 0xe3,
	0x45, 0x2c, 0x44, 0x2d, 0x42, 0xe9, 0x27, 0x4f, 0xa4, 0x0a, 0xe4, 0x9f, 0x55, 0x7e, 0x79, 0x3c,
	0x30, 0xdc, 0xaf, 0x47, 0xb7, 0xe5, 0x1e, 0xb1, 0x8e, 0x18, 0x93, 0x97, 0x06, 0xe1, 0x5f, 0x47,
	0x86, 0xed, 0x62, 0x6a, 0xeb, 0x26, 0xfb, 0x3f, 0xe3, 0xc8, 0x24, 0x83, 0xe1, 0xed, 0x6d, 0xd6,
	0x5f, 0x7c, 0xf6, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0x8e, 0xa9, 0x0b, 0x17, 0x19, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogCoordStateServiceClient is the client API for LogCoordStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogCoordStateServiceClient interface {
	GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error)
}

type logCoordStateServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogCoordStateServiceClient(cc *grpc.ClientConn) LogCoordStateServiceClient {
	return &logCoordStateServiceClient{cc}
}

func (c *logCoordStateServiceClient) GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error) {
	out := new(milvuspb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogCoordStateService/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogCoordStateServiceServer is the server API for LogCoordStateService service.
type LogCoordStateServiceServer interface {
	GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error)
}

// UnimplementedLogCoordStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogCoordStateServiceServer struct {
}

func (*UnimplementedLogCoordStateServiceServer) GetComponentStates(ctx context.Context, req *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}

func RegisterLogCoordStateServiceServer(s *grpc.Server, srv LogCoordStateServiceServer) {
	s.RegisterService(&_LogCoordStateService_serviceDesc, srv)
}

func _LogCoordStateService_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogCoordStateServiceServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogCoordStateService/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogCoordStateServiceServer).GetComponentStates(ctx, req.(*milvuspb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogCoordStateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.log.LogCoordStateService",
	HandlerType: (*LogCoordStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _LogCoordStateService_GetComponentStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}

// LogNodeStateServiceClient is the client API for LogNodeStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogNodeStateServiceClient interface {
	GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error)
}

type logNodeStateServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogNodeStateServiceClient(cc *grpc.ClientConn) LogNodeStateServiceClient {
	return &logNodeStateServiceClient{cc}
}

func (c *logNodeStateServiceClient) GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error) {
	out := new(milvuspb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogNodeStateService/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogNodeStateServiceServer is the server API for LogNodeStateService service.
type LogNodeStateServiceServer interface {
	GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error)
}

// UnimplementedLogNodeStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogNodeStateServiceServer struct {
}

func (*UnimplementedLogNodeStateServiceServer) GetComponentStates(ctx context.Context, req *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}

func RegisterLogNodeStateServiceServer(s *grpc.Server, srv LogNodeStateServiceServer) {
	s.RegisterService(&_LogNodeStateService_serviceDesc, srv)
}

func _LogNodeStateService_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogNodeStateServiceServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogNodeStateService/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogNodeStateServiceServer).GetComponentStates(ctx, req.(*milvuspb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogNodeStateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.log.LogNodeStateService",
	HandlerType: (*LogNodeStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _LogNodeStateService_GetComponentStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}

// LogCoordChannelServiceClient is the client API for LogCoordChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogCoordChannelServiceClient interface {
	// CreatePChannel is a unary RPC to add a pchannel on log coord.
	CreatePChannel(ctx context.Context, in *CreatePChannelRequest, opts ...grpc.CallOption) (*CreatePChannelResponse, error)
	// RemovePChannel is a unary RPC to remove a pchannel on log coord.
	RemovePChannel(ctx context.Context, in *RemovePChannelRequest, opts ...grpc.CallOption) (*RemovePChannelResponse, error)
	// CreateVChannel is a unary RPC to add a vchannel on log coord.
	CreateVChannel(ctx context.Context, in *CreateVChannelRequest, opts ...grpc.CallOption) (*CreateVChannelResponse, error)
	// RemoveVChannel is a unary RPC to remove a vchannel on log coord.
	RemoveVChannel(ctx context.Context, in *RemoveVChannelRequest, opts ...grpc.CallOption) (*RemoveVChannelResponse, error)
}

type logCoordChannelServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogCoordChannelServiceClient(cc *grpc.ClientConn) LogCoordChannelServiceClient {
	return &logCoordChannelServiceClient{cc}
}

func (c *logCoordChannelServiceClient) CreatePChannel(ctx context.Context, in *CreatePChannelRequest, opts ...grpc.CallOption) (*CreatePChannelResponse, error) {
	out := new(CreatePChannelResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogCoordChannelService/CreatePChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logCoordChannelServiceClient) RemovePChannel(ctx context.Context, in *RemovePChannelRequest, opts ...grpc.CallOption) (*RemovePChannelResponse, error) {
	out := new(RemovePChannelResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogCoordChannelService/RemovePChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logCoordChannelServiceClient) CreateVChannel(ctx context.Context, in *CreateVChannelRequest, opts ...grpc.CallOption) (*CreateVChannelResponse, error) {
	out := new(CreateVChannelResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogCoordChannelService/CreateVChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logCoordChannelServiceClient) RemoveVChannel(ctx context.Context, in *RemoveVChannelRequest, opts ...grpc.CallOption) (*RemoveVChannelResponse, error) {
	out := new(RemoveVChannelResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogCoordChannelService/RemoveVChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogCoordChannelServiceServer is the server API for LogCoordChannelService service.
type LogCoordChannelServiceServer interface {
	// CreatePChannel is a unary RPC to add a pchannel on log coord.
	CreatePChannel(context.Context, *CreatePChannelRequest) (*CreatePChannelResponse, error)
	// RemovePChannel is a unary RPC to remove a pchannel on log coord.
	RemovePChannel(context.Context, *RemovePChannelRequest) (*RemovePChannelResponse, error)
	// CreateVChannel is a unary RPC to add a vchannel on log coord.
	CreateVChannel(context.Context, *CreateVChannelRequest) (*CreateVChannelResponse, error)
	// RemoveVChannel is a unary RPC to remove a vchannel on log coord.
	RemoveVChannel(context.Context, *RemoveVChannelRequest) (*RemoveVChannelResponse, error)
}

// UnimplementedLogCoordChannelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogCoordChannelServiceServer struct {
}

func (*UnimplementedLogCoordChannelServiceServer) CreatePChannel(ctx context.Context, req *CreatePChannelRequest) (*CreatePChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePChannel not implemented")
}
func (*UnimplementedLogCoordChannelServiceServer) RemovePChannel(ctx context.Context, req *RemovePChannelRequest) (*RemovePChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePChannel not implemented")
}
func (*UnimplementedLogCoordChannelServiceServer) CreateVChannel(ctx context.Context, req *CreateVChannelRequest) (*CreateVChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVChannel not implemented")
}
func (*UnimplementedLogCoordChannelServiceServer) RemoveVChannel(ctx context.Context, req *RemoveVChannelRequest) (*RemoveVChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVChannel not implemented")
}

func RegisterLogCoordChannelServiceServer(s *grpc.Server, srv LogCoordChannelServiceServer) {
	s.RegisterService(&_LogCoordChannelService_serviceDesc, srv)
}

func _LogCoordChannelService_CreatePChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogCoordChannelServiceServer).CreatePChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogCoordChannelService/CreatePChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogCoordChannelServiceServer).CreatePChannel(ctx, req.(*CreatePChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogCoordChannelService_RemovePChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogCoordChannelServiceServer).RemovePChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogCoordChannelService/RemovePChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogCoordChannelServiceServer).RemovePChannel(ctx, req.(*RemovePChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogCoordChannelService_CreateVChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogCoordChannelServiceServer).CreateVChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogCoordChannelService/CreateVChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogCoordChannelServiceServer).CreateVChannel(ctx, req.(*CreateVChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogCoordChannelService_RemoveVChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogCoordChannelServiceServer).RemoveVChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogCoordChannelService/RemoveVChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogCoordChannelServiceServer).RemoveVChannel(ctx, req.(*RemoveVChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogCoordChannelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.log.LogCoordChannelService",
	HandlerType: (*LogCoordChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePChannel",
			Handler:    _LogCoordChannelService_CreatePChannel_Handler,
		},
		{
			MethodName: "RemovePChannel",
			Handler:    _LogCoordChannelService_RemovePChannel_Handler,
		},
		{
			MethodName: "CreateVChannel",
			Handler:    _LogCoordChannelService_CreateVChannel_Handler,
		},
		{
			MethodName: "RemoveVChannel",
			Handler:    _LogCoordChannelService_RemoveVChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}

// LogCoordAssignmentServiceClient is the client API for LogCoordAssignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogCoordAssignmentServiceClient interface {
	// AssignmentDiscover is used to discover all log nodes managed by the logcoord.
	// Channel assignment information will be pushed to client by stream.
	AssignmentDiscover(ctx context.Context, in *AssignmentDiscoverRequest, opts ...grpc.CallOption) (LogCoordAssignmentService_AssignmentDiscoverClient, error)
	// ReportLogError is used to report log error to logcoord.
	ReportLogError(ctx context.Context, in *ReportLogErrorRequest, opts ...grpc.CallOption) (*ReportLogErrorResponse, error)
}

type logCoordAssignmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogCoordAssignmentServiceClient(cc *grpc.ClientConn) LogCoordAssignmentServiceClient {
	return &logCoordAssignmentServiceClient{cc}
}

func (c *logCoordAssignmentServiceClient) AssignmentDiscover(ctx context.Context, in *AssignmentDiscoverRequest, opts ...grpc.CallOption) (LogCoordAssignmentService_AssignmentDiscoverClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogCoordAssignmentService_serviceDesc.Streams[0], "/milvus.proto.log.LogCoordAssignmentService/AssignmentDiscover", opts...)
	if err != nil {
		return nil, err
	}
	x := &logCoordAssignmentServiceAssignmentDiscoverClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogCoordAssignmentService_AssignmentDiscoverClient interface {
	Recv() (*AssignmentDiscoverResponse, error)
	grpc.ClientStream
}

type logCoordAssignmentServiceAssignmentDiscoverClient struct {
	grpc.ClientStream
}

func (x *logCoordAssignmentServiceAssignmentDiscoverClient) Recv() (*AssignmentDiscoverResponse, error) {
	m := new(AssignmentDiscoverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logCoordAssignmentServiceClient) ReportLogError(ctx context.Context, in *ReportLogErrorRequest, opts ...grpc.CallOption) (*ReportLogErrorResponse, error) {
	out := new(ReportLogErrorResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogCoordAssignmentService/ReportLogError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogCoordAssignmentServiceServer is the server API for LogCoordAssignmentService service.
type LogCoordAssignmentServiceServer interface {
	// AssignmentDiscover is used to discover all log nodes managed by the logcoord.
	// Channel assignment information will be pushed to client by stream.
	AssignmentDiscover(*AssignmentDiscoverRequest, LogCoordAssignmentService_AssignmentDiscoverServer) error
	// ReportLogError is used to report log error to logcoord.
	ReportLogError(context.Context, *ReportLogErrorRequest) (*ReportLogErrorResponse, error)
}

// UnimplementedLogCoordAssignmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogCoordAssignmentServiceServer struct {
}

func (*UnimplementedLogCoordAssignmentServiceServer) AssignmentDiscover(req *AssignmentDiscoverRequest, srv LogCoordAssignmentService_AssignmentDiscoverServer) error {
	return status.Errorf(codes.Unimplemented, "method AssignmentDiscover not implemented")
}
func (*UnimplementedLogCoordAssignmentServiceServer) ReportLogError(ctx context.Context, req *ReportLogErrorRequest) (*ReportLogErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLogError not implemented")
}

func RegisterLogCoordAssignmentServiceServer(s *grpc.Server, srv LogCoordAssignmentServiceServer) {
	s.RegisterService(&_LogCoordAssignmentService_serviceDesc, srv)
}

func _LogCoordAssignmentService_AssignmentDiscover_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssignmentDiscoverRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogCoordAssignmentServiceServer).AssignmentDiscover(m, &logCoordAssignmentServiceAssignmentDiscoverServer{stream})
}

type LogCoordAssignmentService_AssignmentDiscoverServer interface {
	Send(*AssignmentDiscoverResponse) error
	grpc.ServerStream
}

type logCoordAssignmentServiceAssignmentDiscoverServer struct {
	grpc.ServerStream
}

func (x *logCoordAssignmentServiceAssignmentDiscoverServer) Send(m *AssignmentDiscoverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LogCoordAssignmentService_ReportLogError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportLogErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogCoordAssignmentServiceServer).ReportLogError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogCoordAssignmentService/ReportLogError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogCoordAssignmentServiceServer).ReportLogError(ctx, req.(*ReportLogErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogCoordAssignmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.log.LogCoordAssignmentService",
	HandlerType: (*LogCoordAssignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportLogError",
			Handler:    _LogCoordAssignmentService_ReportLogError_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AssignmentDiscover",
			Handler:       _LogCoordAssignmentService_AssignmentDiscover_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log.proto",
}

// LogNodeHandlerServiceClient is the client API for LogNodeHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogNodeHandlerServiceClient interface {
	// Produce is a bi-directional streaming RPC to send messages to a channel.
	// All messages sent to a channel will be assigned a unique messageID.
	// The messageID is used to identify the message in the channel.
	// The messageID isn't promised to be monotonous increasing with the sequence of responsing.
	// Error:
	// If channel isn't assign to this log node, the RPC will return error CHANNEL_NOT_EXIST.
	// If channel is moving away to other log node, the RPC will return error CHANNEL_FENCED.
	Produce(ctx context.Context, opts ...grpc.CallOption) (LogNodeHandlerService_ProduceClient, error)
	// Consume is a server streaming RPC to receive messages from a channel.
	// All message after given startMessageID and excluding will be sent to the client by stream.
	// If no more message in the channel, the stream will be blocked until new message coming.
	// Error:
	// If channel isn't assign to this log node, the RPC will return error CHANNEL_NOT_EXIST.
	// If channel is moving away to other log node, the RPC will return error CHANNEL_FENCED.
	Consume(ctx context.Context, opts ...grpc.CallOption) (LogNodeHandlerService_ConsumeClient, error)
	// GetLatestMessageID is a unary RPC to get the latest message id of a channel.
	GetLatestMessageID(ctx context.Context, in *GetLatestMessageIDRequest, opts ...grpc.CallOption) (*GetLatestMessageIDResponse, error)
}

type logNodeHandlerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogNodeHandlerServiceClient(cc *grpc.ClientConn) LogNodeHandlerServiceClient {
	return &logNodeHandlerServiceClient{cc}
}

func (c *logNodeHandlerServiceClient) Produce(ctx context.Context, opts ...grpc.CallOption) (LogNodeHandlerService_ProduceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogNodeHandlerService_serviceDesc.Streams[0], "/milvus.proto.log.LogNodeHandlerService/Produce", opts...)
	if err != nil {
		return nil, err
	}
	x := &logNodeHandlerServiceProduceClient{stream}
	return x, nil
}

type LogNodeHandlerService_ProduceClient interface {
	Send(*ProduceRequest) error
	Recv() (*ProduceResponse, error)
	grpc.ClientStream
}

type logNodeHandlerServiceProduceClient struct {
	grpc.ClientStream
}

func (x *logNodeHandlerServiceProduceClient) Send(m *ProduceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logNodeHandlerServiceProduceClient) Recv() (*ProduceResponse, error) {
	m := new(ProduceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logNodeHandlerServiceClient) Consume(ctx context.Context, opts ...grpc.CallOption) (LogNodeHandlerService_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogNodeHandlerService_serviceDesc.Streams[1], "/milvus.proto.log.LogNodeHandlerService/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &logNodeHandlerServiceConsumeClient{stream}
	return x, nil
}

type LogNodeHandlerService_ConsumeClient interface {
	Send(*ConsumeRequest) error
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type logNodeHandlerServiceConsumeClient struct {
	grpc.ClientStream
}

func (x *logNodeHandlerServiceConsumeClient) Send(m *ConsumeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logNodeHandlerServiceConsumeClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logNodeHandlerServiceClient) GetLatestMessageID(ctx context.Context, in *GetLatestMessageIDRequest, opts ...grpc.CallOption) (*GetLatestMessageIDResponse, error) {
	out := new(GetLatestMessageIDResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogNodeHandlerService/GetLatestMessageID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogNodeHandlerServiceServer is the server API for LogNodeHandlerService service.
type LogNodeHandlerServiceServer interface {
	// Produce is a bi-directional streaming RPC to send messages to a channel.
	// All messages sent to a channel will be assigned a unique messageID.
	// The messageID is used to identify the message in the channel.
	// The messageID isn't promised to be monotonous increasing with the sequence of responsing.
	// Error:
	// If channel isn't assign to this log node, the RPC will return error CHANNEL_NOT_EXIST.
	// If channel is moving away to other log node, the RPC will return error CHANNEL_FENCED.
	Produce(LogNodeHandlerService_ProduceServer) error
	// Consume is a server streaming RPC to receive messages from a channel.
	// All message after given startMessageID and excluding will be sent to the client by stream.
	// If no more message in the channel, the stream will be blocked until new message coming.
	// Error:
	// If channel isn't assign to this log node, the RPC will return error CHANNEL_NOT_EXIST.
	// If channel is moving away to other log node, the RPC will return error CHANNEL_FENCED.
	Consume(LogNodeHandlerService_ConsumeServer) error
	// GetLatestMessageID is a unary RPC to get the latest message id of a channel.
	GetLatestMessageID(context.Context, *GetLatestMessageIDRequest) (*GetLatestMessageIDResponse, error)
}

// UnimplementedLogNodeHandlerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogNodeHandlerServiceServer struct {
}

func (*UnimplementedLogNodeHandlerServiceServer) Produce(srv LogNodeHandlerService_ProduceServer) error {
	return status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (*UnimplementedLogNodeHandlerServiceServer) Consume(srv LogNodeHandlerService_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (*UnimplementedLogNodeHandlerServiceServer) GetLatestMessageID(ctx context.Context, req *GetLatestMessageIDRequest) (*GetLatestMessageIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestMessageID not implemented")
}

func RegisterLogNodeHandlerServiceServer(s *grpc.Server, srv LogNodeHandlerServiceServer) {
	s.RegisterService(&_LogNodeHandlerService_serviceDesc, srv)
}

func _LogNodeHandlerService_Produce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogNodeHandlerServiceServer).Produce(&logNodeHandlerServiceProduceServer{stream})
}

type LogNodeHandlerService_ProduceServer interface {
	Send(*ProduceResponse) error
	Recv() (*ProduceRequest, error)
	grpc.ServerStream
}

type logNodeHandlerServiceProduceServer struct {
	grpc.ServerStream
}

func (x *logNodeHandlerServiceProduceServer) Send(m *ProduceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logNodeHandlerServiceProduceServer) Recv() (*ProduceRequest, error) {
	m := new(ProduceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogNodeHandlerService_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogNodeHandlerServiceServer).Consume(&logNodeHandlerServiceConsumeServer{stream})
}

type LogNodeHandlerService_ConsumeServer interface {
	Send(*ConsumeResponse) error
	Recv() (*ConsumeRequest, error)
	grpc.ServerStream
}

type logNodeHandlerServiceConsumeServer struct {
	grpc.ServerStream
}

func (x *logNodeHandlerServiceConsumeServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logNodeHandlerServiceConsumeServer) Recv() (*ConsumeRequest, error) {
	m := new(ConsumeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogNodeHandlerService_GetLatestMessageID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestMessageIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogNodeHandlerServiceServer).GetLatestMessageID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogNodeHandlerService/GetLatestMessageID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogNodeHandlerServiceServer).GetLatestMessageID(ctx, req.(*GetLatestMessageIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogNodeHandlerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.log.LogNodeHandlerService",
	HandlerType: (*LogNodeHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestMessageID",
			Handler:    _LogNodeHandlerService_GetLatestMessageID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Produce",
			Handler:       _LogNodeHandlerService_Produce_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Consume",
			Handler:       _LogNodeHandlerService_Consume_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "log.proto",
}

// LogNodeManagerServiceClient is the client API for LogNodeManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogNodeManagerServiceClient interface {
	// Assign is a unary RPC to assign a channel on a log node.
	// Block until the channel assignd is ready to read or write on the log node.
	// Error:
	// If the channel already exists, return error with code CHANNEL_EXIST.
	Assign(ctx context.Context, in *LogNodeManagerAssignRequest, opts ...grpc.CallOption) (*LogNodeManagerAssignResponse, error)
	// Remove is unary RPC to remove a channel on a log node.
	// Data of the channel on flying would be sent or flused as much as possible.
	// Block until the resource of channel is released on the log node.
	// New incoming request of handler of this channel will be rejected with special error.
	// Error:
	// If the channel does not exist, return error with code CHANNEL_NOT_EXIST.
	Remove(ctx context.Context, in *LogNodeManagerRemoveRequest, opts ...grpc.CallOption) (*LogNodeManagerRemoveResponse, error)
	// rpc CollectStatus() ...
	// CollectStatus is unary RPC to collect all avaliable channel info and load balance info on a log node.
	// Used to recover channel info on log coord, collect balance info and health check.
	CollectStatus(ctx context.Context, in *LogNodeManagerCollectStatusRequest, opts ...grpc.CallOption) (*LogNodeManagerCollectStatusResponse, error)
}

type logNodeManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogNodeManagerServiceClient(cc *grpc.ClientConn) LogNodeManagerServiceClient {
	return &logNodeManagerServiceClient{cc}
}

func (c *logNodeManagerServiceClient) Assign(ctx context.Context, in *LogNodeManagerAssignRequest, opts ...grpc.CallOption) (*LogNodeManagerAssignResponse, error) {
	out := new(LogNodeManagerAssignResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogNodeManagerService/Assign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logNodeManagerServiceClient) Remove(ctx context.Context, in *LogNodeManagerRemoveRequest, opts ...grpc.CallOption) (*LogNodeManagerRemoveResponse, error) {
	out := new(LogNodeManagerRemoveResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogNodeManagerService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logNodeManagerServiceClient) CollectStatus(ctx context.Context, in *LogNodeManagerCollectStatusRequest, opts ...grpc.CallOption) (*LogNodeManagerCollectStatusResponse, error) {
	out := new(LogNodeManagerCollectStatusResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.log.LogNodeManagerService/CollectStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogNodeManagerServiceServer is the server API for LogNodeManagerService service.
type LogNodeManagerServiceServer interface {
	// Assign is a unary RPC to assign a channel on a log node.
	// Block until the channel assignd is ready to read or write on the log node.
	// Error:
	// If the channel already exists, return error with code CHANNEL_EXIST.
	Assign(context.Context, *LogNodeManagerAssignRequest) (*LogNodeManagerAssignResponse, error)
	// Remove is unary RPC to remove a channel on a log node.
	// Data of the channel on flying would be sent or flused as much as possible.
	// Block until the resource of channel is released on the log node.
	// New incoming request of handler of this channel will be rejected with special error.
	// Error:
	// If the channel does not exist, return error with code CHANNEL_NOT_EXIST.
	Remove(context.Context, *LogNodeManagerRemoveRequest) (*LogNodeManagerRemoveResponse, error)
	// rpc CollectStatus() ...
	// CollectStatus is unary RPC to collect all avaliable channel info and load balance info on a log node.
	// Used to recover channel info on log coord, collect balance info and health check.
	CollectStatus(context.Context, *LogNodeManagerCollectStatusRequest) (*LogNodeManagerCollectStatusResponse, error)
}

// UnimplementedLogNodeManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogNodeManagerServiceServer struct {
}

func (*UnimplementedLogNodeManagerServiceServer) Assign(ctx context.Context, req *LogNodeManagerAssignRequest) (*LogNodeManagerAssignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assign not implemented")
}
func (*UnimplementedLogNodeManagerServiceServer) Remove(ctx context.Context, req *LogNodeManagerRemoveRequest) (*LogNodeManagerRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedLogNodeManagerServiceServer) CollectStatus(ctx context.Context, req *LogNodeManagerCollectStatusRequest) (*LogNodeManagerCollectStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectStatus not implemented")
}

func RegisterLogNodeManagerServiceServer(s *grpc.Server, srv LogNodeManagerServiceServer) {
	s.RegisterService(&_LogNodeManagerService_serviceDesc, srv)
}

func _LogNodeManagerService_Assign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogNodeManagerAssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogNodeManagerServiceServer).Assign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogNodeManagerService/Assign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogNodeManagerServiceServer).Assign(ctx, req.(*LogNodeManagerAssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogNodeManagerService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogNodeManagerRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogNodeManagerServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogNodeManagerService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogNodeManagerServiceServer).Remove(ctx, req.(*LogNodeManagerRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogNodeManagerService_CollectStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogNodeManagerCollectStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogNodeManagerServiceServer).CollectStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.log.LogNodeManagerService/CollectStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogNodeManagerServiceServer).CollectStatus(ctx, req.(*LogNodeManagerCollectStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogNodeManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.log.LogNodeManagerService",
	HandlerType: (*LogNodeManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assign",
			Handler:    _LogNodeManagerService_Assign_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _LogNodeManagerService_Remove_Handler,
		},
		{
			MethodName: "CollectStatus",
			Handler:    _LogNodeManagerService_CollectStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}
