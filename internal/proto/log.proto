syntax = "proto3";

package milvus.proto.log;

option go_package = "github.com/milvus-io/milvus/internal/proto/logpb";

import "milvus.proto";
import "google/protobuf/empty.proto";

//
// Common
//

// MessageID is the unique identifier of a message.
message MessageID {
    bytes id = 1;
}

// Message is the basic unit of communication between publisher and consumer.
message Message {
    bytes payload = 1; // message body
    map<string, string> properties = 2; // message properties
}

// LogNodeBalancerAttributes is the balacing attribute of a log node.
message LogNodeBalancerAttributes {
}

// LogNodeAssignment is the assignment info of a log node.
message LogNodeAssignment {
    int64 serverID = 1;
    string address = 2;
    repeated PChannelInfo channels = 3;
}

// PChannelInfo is the information of a pchannel info.
message PChannelInfo {
    string name = 1; // channel name
    int64 term = 2; // A monotonic increasing term, every time the channel is recovered or moved to another lognode, the term will increase by meta server.
    int64 serverID = 3; // The log node id address of the channel.
    repeated VChannelInfo vChannelInfos = 4; // PChannel related vchannels.
}

// VChannelInfo is the information of a vchannel info.
message VChannelInfo {
    string name = 1;
}

// LogCode is the error code for log internal component.
enum LogCode {
    LOG_CODE_OK = 0;
    LOG_CODE_CHANNEL_EXIST = 1; // channel already exist
    LOG_CODE_CHANNEL_NOT_EXIST = 2; // channel not exist
    LOG_CODE_CHANNEL_FENCED = 3; // channel is fenced
    LOG_CODE_ON_SHUTDOWN = 4; // component is on shutdown
    LOG_CODE_INVALID_REQUEST_SEQ = 5; // invalid request sequence
    LOG_CODE_UNMATCHED_CHANNEL_TERM = 6; // unmatched channel term
    LOG_CODE_IGNORED_OPERATION = 7; // ignored operation
    LOG_CODE_INNER = 8; // underlying service failure.
    LOG_CODE_EOF = 9; // end of stream, generated by grpc status.
    LOG_CODE_UNKNOWN = 999; // unknown error
}

// LogError is the error type for log internal component.
message LogError {
    LogCode code = 1;
    string cause = 2;
}

// VersionPair is the version pair of global and local.
message VersionPair {
    int64 global = 1;
    int64 local = 2;
}

//
// Milvus Service
//

service LogCoordStateService {
    rpc GetComponentStates(milvus.GetComponentStatesRequest) returns (milvus.ComponentStates) {}
}

service LogNodeStateService {
    rpc GetComponentStates(milvus.GetComponentStatesRequest) returns (milvus.ComponentStates) {}
}

//
// LogCoordChannelService
//

// LogCoordChannelService is the channel management operation on log coord.
service LogCoordChannelService {
    // CreatePChannel is a unary RPC to add a pchannel on log coord.
    rpc CreatePChannel(CreatePChannelRequest) returns (CreatePChannelResponse) {}

    // RemovePChannel is a unary RPC to remove a pchannel on log coord.
    rpc RemovePChannel(RemovePChannelRequest) returns (RemovePChannelResponse) {}

    // CreateVChannel is a unary RPC to add a vchannel on log coord.
    rpc CreateVChannel(CreateVChannelRequest) returns (CreateVChannelResponse) {}

    // RemoveVChannel is a unary RPC to remove a vchannel on log coord.
    rpc RemoveVChannel(RemoveVChannelRequest) returns (RemoveVChannelResponse) {}
}

message CreatePChannelRequest {
    string pChannelName = 1; // channel name
}

message CreatePChannelResponse {
}

message RemovePChannelRequest {
    string pChannelName = 1; // channel name
}

message RemovePChannelResponse {
}

message CreateVChannelRequest {
    string pChannelName = 1; // channel name
    repeated string vChannelName = 2; // vchannel name
}

message CreateVChannelResponse {
}

message RemoveVChannelRequest {
    string pChannelName = 1; // channel name
    repeated string vChannelName = 2; // vchannel name
}

message RemoveVChannelResponse {
}

//
// LogCoordAssignmentService
//

// LogCoordAssignmentService is the global log management service.
// Server: log coord. Running on every log node.
// Client: all log publish/consuming node.
service LogCoordAssignmentService {
    // AssignmentDiscover is used to discover all log nodes managed by the logcoord.
    // Channel assignment information will be pushed to client by stream.
    rpc AssignmentDiscover(AssignmentDiscoverRequest) returns (stream AssignmentDiscoverResponse) {}

    // ReportLogError is used to report log error to logcoord.
    rpc ReportLogError(ReportLogErrorRequest) returns (ReportLogErrorResponse) {}
}

// AssignmentDiscoverRequest is the request of Discovery
message AssignmentDiscoverRequest {
}

// AssignmentDiscoverResponse is the response of Discovery
message AssignmentDiscoverResponse {
    VersionPair version = 1;
    repeated LogNodeAssignment addresses = 2;
}

// ReportLogErrorRequest is the request of ReportLogError
message ReportLogErrorRequest {
    string name = 1; // channel name
    int64 term = 2; // A monotonic increasing term, every time the channel is recovered or moved to another lognode, the term will increase by meta server.
    LogError err = 3; // error happend on log node
}

// ReportLogErrorResponse is the response of ReportLogError
message ReportLogErrorResponse {
}

//
// LogNodeHandlerService
//

// LogNodeHandlerService is the service to handle log messages.
// All handler operation will be blocked until the channel is ready read or write on that log node.
// Server: all log node. Running on every log node.
// Client: all log produce or consuming node.
service LogNodeHandlerService {
    // Produce is a bi-directional streaming RPC to send messages to a channel.
    // All messages sent to a channel will be assigned a unique messageID.
    // The messageID is used to identify the message in the channel.
    // The messageID isn't promised to be monotonous increasing with the sequence of responsing.
    // Error:
    // If channel isn't assign to this log node, the RPC will return error CHANNEL_NOT_EXIST.
    // If channel is moving away to other log node, the RPC will return error CHANNEL_FENCED.
    rpc Produce(stream ProduceRequest) returns (stream ProduceResponse) {};

    // Consume is a server streaming RPC to receive messages from a channel.
    // All message after given startMessageID and excluding will be sent to the client by stream.
    // If no more message in the channel, the stream will be blocked until new message coming.
    // Error:
    // If channel isn't assign to this log node, the RPC will return error CHANNEL_NOT_EXIST.
    // If channel is moving away to other log node, the RPC will return error CHANNEL_FENCED.
    rpc Consume(stream ConsumeRequest) returns (stream ConsumeResponse) {};

    // GetLatestMessageID is a unary RPC to get the latest message id of a channel.
    rpc GetLatestMessageID(GetLatestMessageIDRequest) returns (GetLatestMessageIDResponse) {};
}

// ProduceRequest is the request of the Produce RPC.
// Channel name will be passthrough in the header of stream bu not in the request body.
message ProduceRequest {
    oneof request {
        ProduceMessageRequest produce = 2;
        CloseProducerRequest close = 3;
    }
}

// CreateProducerRequest is the request of the CreateProducer RPC.
// CreateProducerRequest is passed in the header of stream.
message CreateProducerRequest {
    string channelName = 1; // channel name
    int64 term  = 2; // channel term
}

// ProduceMessageRequest is the request of the Produce RPC.
message ProduceMessageRequest {
    int64 requestID = 1; // request id for reply.
    Message message = 2; // message to be sent.
}

// CloseProducerRequest is the request of the CloseProducer RPC.
// After CloseProducerRequest is requested, no more ProduceRequest can be sent.
message CloseProducerRequest {
}

// ProduceResponse is the response of the Produce RPC.
message ProduceResponse {
    oneof response {
        CreateProducerResponse create = 1;
        ProduceMessageResponse produce = 2;
        CloseProducerResponse close = 3;
    }
}

// CreateProducerResponse is the result of the CreateProducer RPC.
message CreateProducerResponse {
    int64 producerID = 1; // A unique producer id on lognode for this producer in lognode lifetime. 
                          // Is used to identify the producer in lognode for other unary grpc call at producer level.
}

message ProduceMessageResponse {
    int64 requestID = 1;
    oneof response {
        ProduceMessageResponseResult result = 2;
        LogError error = 3;
    }
}

// ProduceMessageResponseResult is the result of the produce message streaming RPC.
message ProduceMessageResponseResult {
    MessageID id = 1; // the offset of the message in the channel
}

// CloseProducerResponse is the result of the CloseProducer RPC.
message CloseProducerResponse {
}

// ConsumeRequest is the request of the Consume RPC.
// Add more control block in future.
message ConsumeRequest {
    oneof request {
        CloseConsumerRequest close = 1;
    }
}

// CreateConsumerRequest is the request of the CreateConsumer RPC.
// CreateConsumerRequest is passed in the header of stream.
message CreateConsumerRequest {
    string channelName = 1; // channel name.
    int64 term = 2; // channel term.
    DeliverPolicy deliverPolicy = 3; // deliver policy.
}

message DeliverPolicy {
    oneof policy {
        google.protobuf.Empty all = 1; // deliver all messages.
        google.protobuf.Empty latest = 2; // deliver the latest message.
        MessageID startFrom = 3; // deliver message from this message id. [startFrom, ...]
        MessageID startAfter = 4; // deliver message after this message id. (startAfter, ...]
    }
}

// CloseConsumerRequest is the request of the CloseConsumer RPC.
// After CloseConsumerRequest is requested, no more ConsumeRequest can be sent.
message CloseConsumerRequest {
}

// ConsumeResponse is the reponse of the Consume RPC.
message ConsumeResponse {
    oneof response {
        CreateConsumerResponse create = 1;
        ConsumeMessageReponse consume = 2;
        CloseConsumerResponse close = 3;
    }
}

message CreateConsumerResponse {
}

message ConsumeMessageReponse {
    MessageID id = 1; // message id of message.
    Message message = 2; // message to be consumed.
}

message CloseConsumerResponse {
}

message GetLatestMessageIDRequest {
    string channelName = 1; // channel name.
    int64 term = 2; // channel term.
}

message GetLatestMessageIDResponse {
    MessageID id = 1; // the offset of the message in the channel
}

//
// LogNodeManagerService
//

// LogNodeManagerService is the log manage operation on log node.
// Server: all log node. Running on every log node.
// Client: log coord. There should be only one client globally to call this service on all lognode.
service LogNodeManagerService {
    // Assign is a unary RPC to assign a channel on a log node.
    // Block until the channel assignd is ready to read or write on the log node.
    // Error:
    // If the channel already exists, return error with code CHANNEL_EXIST.
    rpc Assign(LogNodeManagerAssignRequest) returns (LogNodeManagerAssignResponse) {};

    // Remove is unary RPC to remove a channel on a log node.
    // Data of the channel on flying would be sent or flused as much as possible.
    // Block until the resource of channel is released on the log node.
    // New incoming request of handler of this channel will be rejected with special error.
    // Error:
    // If the channel does not exist, return error with code CHANNEL_NOT_EXIST.
    rpc Remove(LogNodeManagerRemoveRequest) returns (LogNodeManagerRemoveResponse) {};

    // rpc CollectStatus() ...
    // CollectStatus is unary RPC to collect all avaliable channel info and load balance info on a log node.
    // Used to recover channel info on log coord, collect balance info and health check.
    rpc CollectStatus(LogNodeManagerCollectStatusRequest) returns (LogNodeManagerCollectStatusResponse) {};
}

// LogManagerAssignRequest is the request message of Assign RPC.
message LogNodeManagerAssignRequest {
    PChannelInfo channel = 1;
}

message LogNodeManagerAssignResponse {
}

message LogNodeManagerRemoveRequest {
    string channelName = 1;
    int64 term = 2;
}

message LogNodeManagerRemoveResponse {}

message LogNodeManagerCollectStatusRequest {
}

message LogNodeManagerCollectStatusResponse {
    LogNodeBalancerAttributes balancerAttributes = 1;
    repeated PChannelInfo channels = 2;
}
