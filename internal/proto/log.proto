syntax = "proto3";

package milvus.proto.log;

option go_package = "github.com/milvus-io/milvus/internal/proto/logpb";

import "milvus.proto";
import "google/protobuf/empty.proto";

//
// Common
//

// MessageID is the unique identifier of messages in same channel.
// It's different if underlying message system is different.
message MessageID {
    oneof id {
        MessageIDKafka kafka = 1;
        MessageIDPulsar pulsar = 2;
        MessageIDRmq rmq = 3;
        MessageIDNmq nmq = 4;
    }
}

// MessageIDKafka is the message id like kafka.
message MessageIDKafka {
    int64 Offset = 1;
}

// MessageIDRmq is the message id like rocksmq.
message MessageIDRmq {
    int64 offset = 1;
}

// MessageIDNmq is the message id like natsmq.
message MessageIDNmq {
    uint64 offset = 1;
}

// MessageIDPulsar is the message id like pulsar.
message MessageIDPulsar {
    bytes serialized = 1;
}

// Message is the basic unit of communication between publisher and consumer.
message Message {
    bytes payload = 1; // message body
    map<string, string> properties = 2; // message properties
}

// PChannelInfo is the information of a pchannel info.
message PChannelInfo {
    string name = 1; // channel name
    int64 term = 2; // A monotonic increasing term, every time the channel is recovered or moved to another lognode, the term will increase by meta server.
    int64 serverID = 3; // The log node id address of the channel.
    repeated VChannelInfo vChannelInfos = 4; // PChannel related vchannels.
}

// VChannelInfo is the information of a vchannel info.
message VChannelInfo {
    string name = 1;
}

// LogCode is the error code for log internal component.
enum LogCode {
    LOG_CODE_OK = 0;
    LOG_CODE_CHANNEL_EXIST = 1; // channel already exist
    LOG_CODE_CHANNEL_NOT_EXIST = 2; // channel not exist
    LOG_CODE_CHANNEL_FENCED = 3; // channel is fenced
    LOG_CODE_ON_SHUTDOWN = 4; // component is on shutdown
    LOG_CODE_INVALID_REQUEST_SEQ = 5; // invalid request sequence
    LOG_CODE_UNMATCHED_CHANNEL_TERM = 6; // unmatched channel term
    LOG_CODE_IGNORED_OPERATION = 7; // ignored operation
    LOG_CODE_INNER = 8; // underlying service failure.
    LOG_CODE_EOF = 9; // end of stream, generated by grpc status.
    LOG_CODE_UNKNOWN = 999; // unknown error
}

// LogError is the error type for log internal component.
message LogError {
    LogCode code = 1;
    string cause = 2;
}

// VersionPair is the version pair of global and local.
message VersionPair {
    int64 global = 1;
    int64 local = 2;
}

message DeliverPolicy {
    oneof policy {
        google.protobuf.Empty all = 1; // deliver all messages.
        google.protobuf.Empty latest = 2; // deliver the latest message.
        MessageID startFrom = 3; // deliver message from this message id. [startFrom, ...]
        MessageID startAfter = 4; // deliver message after this message id. (startAfter, ...]
    }
}
