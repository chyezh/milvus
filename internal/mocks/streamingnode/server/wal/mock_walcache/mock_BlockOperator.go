// Code generated by mockery v2.32.4. DO NOT EDIT.

package mock_walcache

import mock "github.com/stretchr/testify/mock"

// MockBlockOperator is an autogenerated mock type for the BlockOperator type
type MockBlockOperator struct {
	mock.Mock
}

type MockBlockOperator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockOperator) EXPECT() *MockBlockOperator_Expecter {
	return &MockBlockOperator_Expecter{mock: &_m.Mock}
}

// AsyncEvictDisk provides a mock function with given fields:
func (_m *MockBlockOperator) AsyncEvictDisk() {
	_m.Called()
}

// MockBlockOperator_AsyncEvictDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncEvictDisk'
type MockBlockOperator_AsyncEvictDisk_Call struct {
	*mock.Call
}

// AsyncEvictDisk is a helper method to define mock.On call
func (_e *MockBlockOperator_Expecter) AsyncEvictDisk() *MockBlockOperator_AsyncEvictDisk_Call {
	return &MockBlockOperator_AsyncEvictDisk_Call{Call: _e.mock.On("AsyncEvictDisk")}
}

func (_c *MockBlockOperator_AsyncEvictDisk_Call) Run(run func()) *MockBlockOperator_AsyncEvictDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockOperator_AsyncEvictDisk_Call) Return() *MockBlockOperator_AsyncEvictDisk_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBlockOperator_AsyncEvictDisk_Call) RunAndReturn(run func()) *MockBlockOperator_AsyncEvictDisk_Call {
	_c.Call.Return(run)
	return _c
}

// AsyncEvictMemory provides a mock function with given fields:
func (_m *MockBlockOperator) AsyncEvictMemory() {
	_m.Called()
}

// MockBlockOperator_AsyncEvictMemory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncEvictMemory'
type MockBlockOperator_AsyncEvictMemory_Call struct {
	*mock.Call
}

// AsyncEvictMemory is a helper method to define mock.On call
func (_e *MockBlockOperator_Expecter) AsyncEvictMemory() *MockBlockOperator_AsyncEvictMemory_Call {
	return &MockBlockOperator_AsyncEvictMemory_Call{Call: _e.mock.On("AsyncEvictMemory")}
}

func (_c *MockBlockOperator_AsyncEvictMemory_Call) Run(run func()) *MockBlockOperator_AsyncEvictMemory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockOperator_AsyncEvictMemory_Call) Return() *MockBlockOperator_AsyncEvictMemory_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBlockOperator_AsyncEvictMemory_Call) RunAndReturn(run func()) *MockBlockOperator_AsyncEvictMemory_Call {
	_c.Call.Return(run)
	return _c
}

// AsyncSwapIn provides a mock function with given fields:
func (_m *MockBlockOperator) AsyncSwapIn() {
	_m.Called()
}

// MockBlockOperator_AsyncSwapIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncSwapIn'
type MockBlockOperator_AsyncSwapIn_Call struct {
	*mock.Call
}

// AsyncSwapIn is a helper method to define mock.On call
func (_e *MockBlockOperator_Expecter) AsyncSwapIn() *MockBlockOperator_AsyncSwapIn_Call {
	return &MockBlockOperator_AsyncSwapIn_Call{Call: _e.mock.On("AsyncSwapIn")}
}

func (_c *MockBlockOperator_AsyncSwapIn_Call) Run(run func()) *MockBlockOperator_AsyncSwapIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockOperator_AsyncSwapIn_Call) Return() *MockBlockOperator_AsyncSwapIn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBlockOperator_AsyncSwapIn_Call) RunAndReturn(run func()) *MockBlockOperator_AsyncSwapIn_Call {
	_c.Call.Return(run)
	return _c
}

// Bytes provides a mock function with given fields:
func (_m *MockBlockOperator) Bytes() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockBlockOperator_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockBlockOperator_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockBlockOperator_Expecter) Bytes() *MockBlockOperator_Bytes_Call {
	return &MockBlockOperator_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockBlockOperator_Bytes_Call) Run(run func()) *MockBlockOperator_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockOperator_Bytes_Call) Return(_a0 int64) *MockBlockOperator_Bytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockOperator_Bytes_Call) RunAndReturn(run func() int64) *MockBlockOperator_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields:
func (_m *MockBlockOperator) Register() {
	_m.Called()
}

// MockBlockOperator_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockBlockOperator_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
func (_e *MockBlockOperator_Expecter) Register() *MockBlockOperator_Register_Call {
	return &MockBlockOperator_Register_Call{Call: _e.mock.On("Register")}
}

func (_c *MockBlockOperator_Register_Call) Run(run func()) *MockBlockOperator_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockOperator_Register_Call) Return() *MockBlockOperator_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBlockOperator_Register_Call) RunAndReturn(run func()) *MockBlockOperator_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockOperator creates a new instance of MockBlockOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockOperator {
	mock := &MockBlockOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
