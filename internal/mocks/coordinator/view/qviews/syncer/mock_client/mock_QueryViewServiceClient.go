// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_client

import (
	client "github.com/milvus-io/milvus/internal/coordinator/view/qviews/syncer/client"
	log "github.com/milvus-io/milvus/pkg/v2/log"

	mock "github.com/stretchr/testify/mock"
)

// MockQueryViewServiceClient is an autogenerated mock type for the QueryViewServiceClient type
type MockQueryViewServiceClient struct {
	mock.Mock
}

type MockQueryViewServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryViewServiceClient) EXPECT() *MockQueryViewServiceClient_Expecter {
	return &MockQueryViewServiceClient_Expecter{mock: &_m.Mock}
}

// CreateSyncer provides a mock function with given fields: opt
func (_m *MockQueryViewServiceClient) CreateSyncer(opt client.SyncOption) client.QueryViewServiceSyncer {
	ret := _m.Called(opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateSyncer")
	}

	var r0 client.QueryViewServiceSyncer
	if rf, ok := ret.Get(0).(func(client.SyncOption) client.QueryViewServiceSyncer); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.QueryViewServiceSyncer)
		}
	}

	return r0
}

// MockQueryViewServiceClient_CreateSyncer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSyncer'
type MockQueryViewServiceClient_CreateSyncer_Call struct {
	*mock.Call
}

// CreateSyncer is a helper method to define mock.On call
//   - opt client.SyncOption
func (_e *MockQueryViewServiceClient_Expecter) CreateSyncer(opt interface{}) *MockQueryViewServiceClient_CreateSyncer_Call {
	return &MockQueryViewServiceClient_CreateSyncer_Call{Call: _e.mock.On("CreateSyncer", opt)}
}

func (_c *MockQueryViewServiceClient_CreateSyncer_Call) Run(run func(opt client.SyncOption)) *MockQueryViewServiceClient_CreateSyncer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SyncOption))
	})
	return _c
}

func (_c *MockQueryViewServiceClient_CreateSyncer_Call) Return(_a0 client.QueryViewServiceSyncer) *MockQueryViewServiceClient_CreateSyncer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryViewServiceClient_CreateSyncer_Call) RunAndReturn(run func(client.SyncOption) client.QueryViewServiceSyncer) *MockQueryViewServiceClient_CreateSyncer_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogger provides a mock function with given fields: logger
func (_m *MockQueryViewServiceClient) SetLogger(logger *log.MLogger) {
	_m.Called(logger)
}

// MockQueryViewServiceClient_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type MockQueryViewServiceClient_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - logger *log.MLogger
func (_e *MockQueryViewServiceClient_Expecter) SetLogger(logger interface{}) *MockQueryViewServiceClient_SetLogger_Call {
	return &MockQueryViewServiceClient_SetLogger_Call{Call: _e.mock.On("SetLogger", logger)}
}

func (_c *MockQueryViewServiceClient_SetLogger_Call) Run(run func(logger *log.MLogger)) *MockQueryViewServiceClient_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*log.MLogger))
	})
	return _c
}

func (_c *MockQueryViewServiceClient_SetLogger_Call) Return() *MockQueryViewServiceClient_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockQueryViewServiceClient_SetLogger_Call) RunAndReturn(run func(*log.MLogger)) *MockQueryViewServiceClient_SetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryViewServiceClient creates a new instance of MockQueryViewServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryViewServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryViewServiceClient {
	mock := &MockQueryViewServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
