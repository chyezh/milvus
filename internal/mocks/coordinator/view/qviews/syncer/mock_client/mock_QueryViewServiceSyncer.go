// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_client

import (
	viewpb "github.com/milvus-io/milvus/pkg/v2/proto/viewpb"
	mock "github.com/stretchr/testify/mock"
)

// MockQueryViewServiceSyncer is an autogenerated mock type for the QueryViewServiceSyncer type
type MockQueryViewServiceSyncer struct {
	mock.Mock
}

type MockQueryViewServiceSyncer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryViewServiceSyncer) EXPECT() *MockQueryViewServiceSyncer_Expecter {
	return &MockQueryViewServiceSyncer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockQueryViewServiceSyncer) Close() {
	_m.Called()
}

// MockQueryViewServiceSyncer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockQueryViewServiceSyncer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockQueryViewServiceSyncer_Expecter) Close() *MockQueryViewServiceSyncer_Close_Call {
	return &MockQueryViewServiceSyncer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockQueryViewServiceSyncer_Close_Call) Run(run func()) *MockQueryViewServiceSyncer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryViewServiceSyncer_Close_Call) Return() *MockQueryViewServiceSyncer_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockQueryViewServiceSyncer_Close_Call) RunAndReturn(run func()) *MockQueryViewServiceSyncer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// SyncAtBackground provides a mock function with given fields: _a0
func (_m *MockQueryViewServiceSyncer) SyncAtBackground(_a0 *viewpb.SyncQueryViewsRequest) {
	_m.Called(_a0)
}

// MockQueryViewServiceSyncer_SyncAtBackground_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncAtBackground'
type MockQueryViewServiceSyncer_SyncAtBackground_Call struct {
	*mock.Call
}

// SyncAtBackground is a helper method to define mock.On call
//   - _a0 *viewpb.SyncQueryViewsRequest
func (_e *MockQueryViewServiceSyncer_Expecter) SyncAtBackground(_a0 interface{}) *MockQueryViewServiceSyncer_SyncAtBackground_Call {
	return &MockQueryViewServiceSyncer_SyncAtBackground_Call{Call: _e.mock.On("SyncAtBackground", _a0)}
}

func (_c *MockQueryViewServiceSyncer_SyncAtBackground_Call) Run(run func(_a0 *viewpb.SyncQueryViewsRequest)) *MockQueryViewServiceSyncer_SyncAtBackground_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*viewpb.SyncQueryViewsRequest))
	})
	return _c
}

func (_c *MockQueryViewServiceSyncer_SyncAtBackground_Call) Return() *MockQueryViewServiceSyncer_SyncAtBackground_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockQueryViewServiceSyncer_SyncAtBackground_Call) RunAndReturn(run func(*viewpb.SyncQueryViewsRequest)) *MockQueryViewServiceSyncer_SyncAtBackground_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryViewServiceSyncer creates a new instance of MockQueryViewServiceSyncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryViewServiceSyncer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryViewServiceSyncer {
	mock := &MockQueryViewServiceSyncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
