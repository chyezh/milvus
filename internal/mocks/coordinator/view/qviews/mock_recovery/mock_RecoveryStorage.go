// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_recovery

import (
	context "context"

	events "github.com/milvus-io/milvus/internal/coordinator/view/qviews/events"
	mock "github.com/stretchr/testify/mock"

	qviews "github.com/milvus-io/milvus/internal/coordinator/view/qviews"

	viewpb "github.com/milvus-io/milvus/internal/proto/viewpb"
)

// MockRecoveryStorage is an autogenerated mock type for the RecoveryStorage type
type MockRecoveryStorage struct {
	mock.Mock
}

type MockRecoveryStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecoveryStorage) EXPECT() *MockRecoveryStorage_Expecter {
	return &MockRecoveryStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockRecoveryStorage) Close() {
	_m.Called()
}

// MockRecoveryStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRecoveryStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockRecoveryStorage_Expecter) Close() *MockRecoveryStorage_Close_Call {
	return &MockRecoveryStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockRecoveryStorage_Close_Call) Run(run func()) *MockRecoveryStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecoveryStorage_Close_Call) Return() *MockRecoveryStorage_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecoveryStorage_Close_Call) RunAndReturn(run func()) *MockRecoveryStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, deleted
func (_m *MockRecoveryStorage) Delete(ctx context.Context, deleted *viewpb.QueryViewOfShard) {
	_m.Called(ctx, deleted)
}

// MockRecoveryStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRecoveryStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - deleted *viewpb.QueryViewOfShard
func (_e *MockRecoveryStorage_Expecter) Delete(ctx interface{}, deleted interface{}) *MockRecoveryStorage_Delete_Call {
	return &MockRecoveryStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, deleted)}
}

func (_c *MockRecoveryStorage_Delete_Call) Run(run func(ctx context.Context, deleted *viewpb.QueryViewOfShard)) *MockRecoveryStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*viewpb.QueryViewOfShard))
	})
	return _c
}

func (_c *MockRecoveryStorage_Delete_Call) Return() *MockRecoveryStorage_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecoveryStorage_Delete_Call) RunAndReturn(run func(context.Context, *viewpb.QueryViewOfShard)) *MockRecoveryStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Event provides a mock function with given fields:
func (_m *MockRecoveryStorage) Event() <-chan events.RecoveryEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Event")
	}

	var r0 <-chan events.RecoveryEvent
	if rf, ok := ret.Get(0).(func() <-chan events.RecoveryEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan events.RecoveryEvent)
		}
	}

	return r0
}

// MockRecoveryStorage_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type MockRecoveryStorage_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
func (_e *MockRecoveryStorage_Expecter) Event() *MockRecoveryStorage_Event_Call {
	return &MockRecoveryStorage_Event_Call{Call: _e.mock.On("Event")}
}

func (_c *MockRecoveryStorage_Event_Call) Run(run func()) *MockRecoveryStorage_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecoveryStorage_Event_Call) Return(_a0 <-chan events.RecoveryEvent) *MockRecoveryStorage_Event_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecoveryStorage_Event_Call) RunAndReturn(run func() <-chan events.RecoveryEvent) *MockRecoveryStorage_Event_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, saved
func (_m *MockRecoveryStorage) Save(ctx context.Context, saved *viewpb.QueryViewOfShard) {
	_m.Called(ctx, saved)
}

// MockRecoveryStorage_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRecoveryStorage_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - saved *viewpb.QueryViewOfShard
func (_e *MockRecoveryStorage_Expecter) Save(ctx interface{}, saved interface{}) *MockRecoveryStorage_Save_Call {
	return &MockRecoveryStorage_Save_Call{Call: _e.mock.On("Save", ctx, saved)}
}

func (_c *MockRecoveryStorage_Save_Call) Run(run func(ctx context.Context, saved *viewpb.QueryViewOfShard)) *MockRecoveryStorage_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*viewpb.QueryViewOfShard))
	})
	return _c
}

func (_c *MockRecoveryStorage_Save_Call) Return() *MockRecoveryStorage_Save_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecoveryStorage_Save_Call) RunAndReturn(run func(context.Context, *viewpb.QueryViewOfShard)) *MockRecoveryStorage_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SwapPreparing provides a mock function with given fields: ctx, shardID, old, new
func (_m *MockRecoveryStorage) SwapPreparing(ctx context.Context, shardID qviews.ShardID, old *viewpb.QueryViewOfShard, new *viewpb.QueryViewOfShard) {
	_m.Called(ctx, shardID, old, new)
}

// MockRecoveryStorage_SwapPreparing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwapPreparing'
type MockRecoveryStorage_SwapPreparing_Call struct {
	*mock.Call
}

// SwapPreparing is a helper method to define mock.On call
//   - ctx context.Context
//   - shardID qviews.ShardID
//   - old *viewpb.QueryViewOfShard
//   - new *viewpb.QueryViewOfShard
func (_e *MockRecoveryStorage_Expecter) SwapPreparing(ctx interface{}, shardID interface{}, old interface{}, new interface{}) *MockRecoveryStorage_SwapPreparing_Call {
	return &MockRecoveryStorage_SwapPreparing_Call{Call: _e.mock.On("SwapPreparing", ctx, shardID, old, new)}
}

func (_c *MockRecoveryStorage_SwapPreparing_Call) Run(run func(ctx context.Context, shardID qviews.ShardID, old *viewpb.QueryViewOfShard, new *viewpb.QueryViewOfShard)) *MockRecoveryStorage_SwapPreparing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(qviews.ShardID), args[2].(*viewpb.QueryViewOfShard), args[3].(*viewpb.QueryViewOfShard))
	})
	return _c
}

func (_c *MockRecoveryStorage_SwapPreparing_Call) Return() *MockRecoveryStorage_SwapPreparing_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecoveryStorage_SwapPreparing_Call) RunAndReturn(run func(context.Context, qviews.ShardID, *viewpb.QueryViewOfShard, *viewpb.QueryViewOfShard)) *MockRecoveryStorage_SwapPreparing_Call {
	_c.Call.Return(run)
	return _c
}

// UpNewPreparingView provides a mock function with given fields: ctx, newUp
func (_m *MockRecoveryStorage) UpNewPreparingView(ctx context.Context, newUp *viewpb.QueryViewOfShard) {
	_m.Called(ctx, newUp)
}

// MockRecoveryStorage_UpNewPreparingView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpNewPreparingView'
type MockRecoveryStorage_UpNewPreparingView_Call struct {
	*mock.Call
}

// UpNewPreparingView is a helper method to define mock.On call
//   - ctx context.Context
//   - newUp *viewpb.QueryViewOfShard
func (_e *MockRecoveryStorage_Expecter) UpNewPreparingView(ctx interface{}, newUp interface{}) *MockRecoveryStorage_UpNewPreparingView_Call {
	return &MockRecoveryStorage_UpNewPreparingView_Call{Call: _e.mock.On("UpNewPreparingView", ctx, newUp)}
}

func (_c *MockRecoveryStorage_UpNewPreparingView_Call) Run(run func(ctx context.Context, newUp *viewpb.QueryViewOfShard)) *MockRecoveryStorage_UpNewPreparingView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*viewpb.QueryViewOfShard))
	})
	return _c
}

func (_c *MockRecoveryStorage_UpNewPreparingView_Call) Return() *MockRecoveryStorage_UpNewPreparingView_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecoveryStorage_UpNewPreparingView_Call) RunAndReturn(run func(context.Context, *viewpb.QueryViewOfShard)) *MockRecoveryStorage_UpNewPreparingView_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRecoveryStorage creates a new instance of MockRecoveryStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecoveryStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecoveryStorage {
	mock := &MockRecoveryStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
