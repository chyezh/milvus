// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_recovery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	viewpb "github.com/milvus-io/milvus/pkg/v2/proto/viewpb"
)

// MockRecoveryStorage is an autogenerated mock type for the RecoveryStorage type
type MockRecoveryStorage struct {
	mock.Mock
}

type MockRecoveryStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecoveryStorage) EXPECT() *MockRecoveryStorage_Expecter {
	return &MockRecoveryStorage_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx
func (_m *MockRecoveryStorage) List(ctx context.Context) ([]*viewpb.QueryViewOfShard, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*viewpb.QueryViewOfShard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*viewpb.QueryViewOfShard, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*viewpb.QueryViewOfShard); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*viewpb.QueryViewOfShard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecoveryStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRecoveryStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRecoveryStorage_Expecter) List(ctx interface{}) *MockRecoveryStorage_List_Call {
	return &MockRecoveryStorage_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockRecoveryStorage_List_Call) Run(run func(ctx context.Context)) *MockRecoveryStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRecoveryStorage_List_Call) Return(_a0 []*viewpb.QueryViewOfShard, _a1 error) *MockRecoveryStorage_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecoveryStorage_List_Call) RunAndReturn(run func(context.Context) ([]*viewpb.QueryViewOfShard, error)) *MockRecoveryStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, saved
func (_m *MockRecoveryStorage) Save(ctx context.Context, saved ...*viewpb.QueryViewOfShard) error {
	_va := make([]interface{}, len(saved))
	for _i := range saved {
		_va[_i] = saved[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*viewpb.QueryViewOfShard) error); ok {
		r0 = rf(ctx, saved...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecoveryStorage_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRecoveryStorage_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - saved ...*viewpb.QueryViewOfShard
func (_e *MockRecoveryStorage_Expecter) Save(ctx interface{}, saved ...interface{}) *MockRecoveryStorage_Save_Call {
	return &MockRecoveryStorage_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{ctx}, saved...)...)}
}

func (_c *MockRecoveryStorage_Save_Call) Run(run func(ctx context.Context, saved ...*viewpb.QueryViewOfShard)) *MockRecoveryStorage_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*viewpb.QueryViewOfShard, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*viewpb.QueryViewOfShard)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRecoveryStorage_Save_Call) Return(_a0 error) *MockRecoveryStorage_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecoveryStorage_Save_Call) RunAndReturn(run func(context.Context, ...*viewpb.QueryViewOfShard) error) *MockRecoveryStorage_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRecoveryStorage creates a new instance of MockRecoveryStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecoveryStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecoveryStorage {
	mock := &MockRecoveryStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
