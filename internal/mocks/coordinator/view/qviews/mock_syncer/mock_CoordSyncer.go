// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_syncer

import (
	events "github.com/milvus-io/milvus/internal/coordinator/view/qviews/events"
	mock "github.com/stretchr/testify/mock"

	syncer "github.com/milvus-io/milvus/internal/coordinator/view/qviews/syncer"
)

// MockCoordSyncer is an autogenerated mock type for the CoordSyncer type
type MockCoordSyncer struct {
	mock.Mock
}

type MockCoordSyncer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoordSyncer) EXPECT() *MockCoordSyncer_Expecter {
	return &MockCoordSyncer_Expecter{mock: &_m.Mock}
}

// Receiver provides a mock function with given fields:
func (_m *MockCoordSyncer) Receiver() <-chan []events.SyncerEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Receiver")
	}

	var r0 <-chan []events.SyncerEvent
	if rf, ok := ret.Get(0).(func() <-chan []events.SyncerEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []events.SyncerEvent)
		}
	}

	return r0
}

// MockCoordSyncer_Receiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receiver'
type MockCoordSyncer_Receiver_Call struct {
	*mock.Call
}

// Receiver is a helper method to define mock.On call
func (_e *MockCoordSyncer_Expecter) Receiver() *MockCoordSyncer_Receiver_Call {
	return &MockCoordSyncer_Receiver_Call{Call: _e.mock.On("Receiver")}
}

func (_c *MockCoordSyncer_Receiver_Call) Run(run func()) *MockCoordSyncer_Receiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCoordSyncer_Receiver_Call) Return(_a0 <-chan []events.SyncerEvent) *MockCoordSyncer_Receiver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoordSyncer_Receiver_Call) RunAndReturn(run func() <-chan []events.SyncerEvent) *MockCoordSyncer_Receiver_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: g
func (_m *MockCoordSyncer) Sync(g syncer.SyncGroup) {
	_m.Called(g)
}

// MockCoordSyncer_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockCoordSyncer_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - g syncer.SyncGroup
func (_e *MockCoordSyncer_Expecter) Sync(g interface{}) *MockCoordSyncer_Sync_Call {
	return &MockCoordSyncer_Sync_Call{Call: _e.mock.On("Sync", g)}
}

func (_c *MockCoordSyncer_Sync_Call) Run(run func(g syncer.SyncGroup)) *MockCoordSyncer_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(syncer.SyncGroup))
	})
	return _c
}

func (_c *MockCoordSyncer_Sync_Call) Return() *MockCoordSyncer_Sync_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCoordSyncer_Sync_Call) RunAndReturn(run func(syncer.SyncGroup)) *MockCoordSyncer_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCoordSyncer creates a new instance of MockCoordSyncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoordSyncer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoordSyncer {
	mock := &MockCoordSyncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
