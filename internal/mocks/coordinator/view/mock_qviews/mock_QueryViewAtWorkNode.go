// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_qviews

import (
	qviews "github.com/milvus-io/milvus/internal/coordinator/view/qviews"
	viewpb "github.com/milvus-io/milvus/pkg/v2/proto/viewpb"
	mock "github.com/stretchr/testify/mock"
)

// MockQueryViewAtWorkNode is an autogenerated mock type for the QueryViewAtWorkNode type
type MockQueryViewAtWorkNode struct {
	mock.Mock
}

type MockQueryViewAtWorkNode_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryViewAtWorkNode) EXPECT() *MockQueryViewAtWorkNode_Expecter {
	return &MockQueryViewAtWorkNode_Expecter{mock: &_m.Mock}
}

// IntoProto provides a mock function with given fields:
func (_m *MockQueryViewAtWorkNode) IntoProto() *viewpb.QueryViewOfShard {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IntoProto")
	}

	var r0 *viewpb.QueryViewOfShard
	if rf, ok := ret.Get(0).(func() *viewpb.QueryViewOfShard); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viewpb.QueryViewOfShard)
		}
	}

	return r0
}

// MockQueryViewAtWorkNode_IntoProto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IntoProto'
type MockQueryViewAtWorkNode_IntoProto_Call struct {
	*mock.Call
}

// IntoProto is a helper method to define mock.On call
func (_e *MockQueryViewAtWorkNode_Expecter) IntoProto() *MockQueryViewAtWorkNode_IntoProto_Call {
	return &MockQueryViewAtWorkNode_IntoProto_Call{Call: _e.mock.On("IntoProto")}
}

func (_c *MockQueryViewAtWorkNode_IntoProto_Call) Run(run func()) *MockQueryViewAtWorkNode_IntoProto_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryViewAtWorkNode_IntoProto_Call) Return(_a0 *viewpb.QueryViewOfShard) *MockQueryViewAtWorkNode_IntoProto_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryViewAtWorkNode_IntoProto_Call) RunAndReturn(run func() *viewpb.QueryViewOfShard) *MockQueryViewAtWorkNode_IntoProto_Call {
	_c.Call.Return(run)
	return _c
}

// ShardID provides a mock function with given fields:
func (_m *MockQueryViewAtWorkNode) ShardID() qviews.ShardID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShardID")
	}

	var r0 qviews.ShardID
	if rf, ok := ret.Get(0).(func() qviews.ShardID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(qviews.ShardID)
	}

	return r0
}

// MockQueryViewAtWorkNode_ShardID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShardID'
type MockQueryViewAtWorkNode_ShardID_Call struct {
	*mock.Call
}

// ShardID is a helper method to define mock.On call
func (_e *MockQueryViewAtWorkNode_Expecter) ShardID() *MockQueryViewAtWorkNode_ShardID_Call {
	return &MockQueryViewAtWorkNode_ShardID_Call{Call: _e.mock.On("ShardID")}
}

func (_c *MockQueryViewAtWorkNode_ShardID_Call) Run(run func()) *MockQueryViewAtWorkNode_ShardID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryViewAtWorkNode_ShardID_Call) Return(_a0 qviews.ShardID) *MockQueryViewAtWorkNode_ShardID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryViewAtWorkNode_ShardID_Call) RunAndReturn(run func() qviews.ShardID) *MockQueryViewAtWorkNode_ShardID_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with given fields:
func (_m *MockQueryViewAtWorkNode) State() qviews.QueryViewState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 qviews.QueryViewState
	if rf, ok := ret.Get(0).(func() qviews.QueryViewState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(qviews.QueryViewState)
	}

	return r0
}

// MockQueryViewAtWorkNode_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type MockQueryViewAtWorkNode_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *MockQueryViewAtWorkNode_Expecter) State() *MockQueryViewAtWorkNode_State_Call {
	return &MockQueryViewAtWorkNode_State_Call{Call: _e.mock.On("State")}
}

func (_c *MockQueryViewAtWorkNode_State_Call) Run(run func()) *MockQueryViewAtWorkNode_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryViewAtWorkNode_State_Call) Return(_a0 qviews.QueryViewState) *MockQueryViewAtWorkNode_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryViewAtWorkNode_State_Call) RunAndReturn(run func() qviews.QueryViewState) *MockQueryViewAtWorkNode_State_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *MockQueryViewAtWorkNode) Version() qviews.QueryViewVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 qviews.QueryViewVersion
	if rf, ok := ret.Get(0).(func() qviews.QueryViewVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(qviews.QueryViewVersion)
	}

	return r0
}

// MockQueryViewAtWorkNode_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockQueryViewAtWorkNode_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockQueryViewAtWorkNode_Expecter) Version() *MockQueryViewAtWorkNode_Version_Call {
	return &MockQueryViewAtWorkNode_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockQueryViewAtWorkNode_Version_Call) Run(run func()) *MockQueryViewAtWorkNode_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryViewAtWorkNode_Version_Call) Return(_a0 qviews.QueryViewVersion) *MockQueryViewAtWorkNode_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryViewAtWorkNode_Version_Call) RunAndReturn(run func() qviews.QueryViewVersion) *MockQueryViewAtWorkNode_Version_Call {
	_c.Call.Return(run)
	return _c
}

// WorkNode provides a mock function with given fields:
func (_m *MockQueryViewAtWorkNode) WorkNode() qviews.WorkNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WorkNode")
	}

	var r0 qviews.WorkNode
	if rf, ok := ret.Get(0).(func() qviews.WorkNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(qviews.WorkNode)
		}
	}

	return r0
}

// MockQueryViewAtWorkNode_WorkNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkNode'
type MockQueryViewAtWorkNode_WorkNode_Call struct {
	*mock.Call
}

// WorkNode is a helper method to define mock.On call
func (_e *MockQueryViewAtWorkNode_Expecter) WorkNode() *MockQueryViewAtWorkNode_WorkNode_Call {
	return &MockQueryViewAtWorkNode_WorkNode_Call{Call: _e.mock.On("WorkNode")}
}

func (_c *MockQueryViewAtWorkNode_WorkNode_Call) Run(run func()) *MockQueryViewAtWorkNode_WorkNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryViewAtWorkNode_WorkNode_Call) Return(_a0 qviews.WorkNode) *MockQueryViewAtWorkNode_WorkNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryViewAtWorkNode_WorkNode_Call) RunAndReturn(run func() qviews.WorkNode) *MockQueryViewAtWorkNode_WorkNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryViewAtWorkNode creates a new instance of MockQueryViewAtWorkNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryViewAtWorkNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryViewAtWorkNode {
	mock := &MockQueryViewAtWorkNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
