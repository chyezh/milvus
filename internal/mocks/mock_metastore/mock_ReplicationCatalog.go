// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_metastore

import (
	context "context"

	commonpb "github.com/milvus-io/milvus-proto/go-api/v2/commonpb"

	mock "github.com/stretchr/testify/mock"

	streamingpb "github.com/milvus-io/milvus/pkg/v2/proto/streamingpb"
)

// MockReplicationCatalog is an autogenerated mock type for the ReplicationCatalog type
type MockReplicationCatalog struct {
	mock.Mock
}

type MockReplicationCatalog_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReplicationCatalog) EXPECT() *MockReplicationCatalog_Expecter {
	return &MockReplicationCatalog_Expecter{mock: &_m.Mock}
}

// GetReplicateConfiguration provides a mock function with given fields: ctx
func (_m *MockReplicationCatalog) GetReplicateConfiguration(ctx context.Context) (*commonpb.ReplicateConfiguration, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicateConfiguration")
	}

	var r0 *commonpb.ReplicateConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*commonpb.ReplicateConfiguration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *commonpb.ReplicateConfiguration); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.ReplicateConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReplicationCatalog_GetReplicateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicateConfiguration'
type MockReplicationCatalog_GetReplicateConfiguration_Call struct {
	*mock.Call
}

// GetReplicateConfiguration is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockReplicationCatalog_Expecter) GetReplicateConfiguration(ctx interface{}) *MockReplicationCatalog_GetReplicateConfiguration_Call {
	return &MockReplicationCatalog_GetReplicateConfiguration_Call{Call: _e.mock.On("GetReplicateConfiguration", ctx)}
}

func (_c *MockReplicationCatalog_GetReplicateConfiguration_Call) Run(run func(ctx context.Context)) *MockReplicationCatalog_GetReplicateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockReplicationCatalog_GetReplicateConfiguration_Call) Return(_a0 *commonpb.ReplicateConfiguration, _a1 error) *MockReplicationCatalog_GetReplicateConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReplicationCatalog_GetReplicateConfiguration_Call) RunAndReturn(run func(context.Context) (*commonpb.ReplicateConfiguration, error)) *MockReplicationCatalog_GetReplicateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// ListReplicatePChannels provides a mock function with given fields: ctx
func (_m *MockReplicationCatalog) ListReplicatePChannels(ctx context.Context) ([]*streamingpb.ReplicatePChannelMeta, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListReplicatePChannels")
	}

	var r0 []*streamingpb.ReplicatePChannelMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*streamingpb.ReplicatePChannelMeta, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*streamingpb.ReplicatePChannelMeta); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*streamingpb.ReplicatePChannelMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReplicationCatalog_ListReplicatePChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReplicatePChannels'
type MockReplicationCatalog_ListReplicatePChannels_Call struct {
	*mock.Call
}

// ListReplicatePChannels is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockReplicationCatalog_Expecter) ListReplicatePChannels(ctx interface{}) *MockReplicationCatalog_ListReplicatePChannels_Call {
	return &MockReplicationCatalog_ListReplicatePChannels_Call{Call: _e.mock.On("ListReplicatePChannels", ctx)}
}

func (_c *MockReplicationCatalog_ListReplicatePChannels_Call) Run(run func(ctx context.Context)) *MockReplicationCatalog_ListReplicatePChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockReplicationCatalog_ListReplicatePChannels_Call) Return(_a0 []*streamingpb.ReplicatePChannelMeta, _a1 error) *MockReplicationCatalog_ListReplicatePChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReplicationCatalog_ListReplicatePChannels_Call) RunAndReturn(run func(context.Context) ([]*streamingpb.ReplicatePChannelMeta, error)) *MockReplicationCatalog_ListReplicatePChannels_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveReplicatePChannel provides a mock function with given fields: ctx, sourceChannelName, targetChannelName
func (_m *MockReplicationCatalog) RemoveReplicatePChannel(ctx context.Context, sourceChannelName string, targetChannelName string) error {
	ret := _m.Called(ctx, sourceChannelName, targetChannelName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveReplicatePChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, sourceChannelName, targetChannelName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicationCatalog_RemoveReplicatePChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReplicatePChannel'
type MockReplicationCatalog_RemoveReplicatePChannel_Call struct {
	*mock.Call
}

// RemoveReplicatePChannel is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceChannelName string
//   - targetChannelName string
func (_e *MockReplicationCatalog_Expecter) RemoveReplicatePChannel(ctx interface{}, sourceChannelName interface{}, targetChannelName interface{}) *MockReplicationCatalog_RemoveReplicatePChannel_Call {
	return &MockReplicationCatalog_RemoveReplicatePChannel_Call{Call: _e.mock.On("RemoveReplicatePChannel", ctx, sourceChannelName, targetChannelName)}
}

func (_c *MockReplicationCatalog_RemoveReplicatePChannel_Call) Run(run func(ctx context.Context, sourceChannelName string, targetChannelName string)) *MockReplicationCatalog_RemoveReplicatePChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockReplicationCatalog_RemoveReplicatePChannel_Call) Return(_a0 error) *MockReplicationCatalog_RemoveReplicatePChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicationCatalog_RemoveReplicatePChannel_Call) RunAndReturn(run func(context.Context, string, string) error) *MockReplicationCatalog_RemoveReplicatePChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SaveReplicateConfiguration provides a mock function with given fields: ctx, config
func (_m *MockReplicationCatalog) SaveReplicateConfiguration(ctx context.Context, config *commonpb.ReplicateConfiguration) error {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for SaveReplicateConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *commonpb.ReplicateConfiguration) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicationCatalog_SaveReplicateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveReplicateConfiguration'
type MockReplicationCatalog_SaveReplicateConfiguration_Call struct {
	*mock.Call
}

// SaveReplicateConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - config *commonpb.ReplicateConfiguration
func (_e *MockReplicationCatalog_Expecter) SaveReplicateConfiguration(ctx interface{}, config interface{}) *MockReplicationCatalog_SaveReplicateConfiguration_Call {
	return &MockReplicationCatalog_SaveReplicateConfiguration_Call{Call: _e.mock.On("SaveReplicateConfiguration", ctx, config)}
}

func (_c *MockReplicationCatalog_SaveReplicateConfiguration_Call) Run(run func(ctx context.Context, config *commonpb.ReplicateConfiguration)) *MockReplicationCatalog_SaveReplicateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*commonpb.ReplicateConfiguration))
	})
	return _c
}

func (_c *MockReplicationCatalog_SaveReplicateConfiguration_Call) Return(_a0 error) *MockReplicationCatalog_SaveReplicateConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicationCatalog_SaveReplicateConfiguration_Call) RunAndReturn(run func(context.Context, *commonpb.ReplicateConfiguration) error) *MockReplicationCatalog_SaveReplicateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// SaveReplicatePChannels provides a mock function with given fields: ctx, infos
func (_m *MockReplicationCatalog) SaveReplicatePChannels(ctx context.Context, infos []*streamingpb.ReplicatePChannelMeta) error {
	ret := _m.Called(ctx, infos)

	if len(ret) == 0 {
		panic("no return value specified for SaveReplicatePChannels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*streamingpb.ReplicatePChannelMeta) error); ok {
		r0 = rf(ctx, infos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicationCatalog_SaveReplicatePChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveReplicatePChannels'
type MockReplicationCatalog_SaveReplicatePChannels_Call struct {
	*mock.Call
}

// SaveReplicatePChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - infos []*streamingpb.ReplicatePChannelMeta
func (_e *MockReplicationCatalog_Expecter) SaveReplicatePChannels(ctx interface{}, infos interface{}) *MockReplicationCatalog_SaveReplicatePChannels_Call {
	return &MockReplicationCatalog_SaveReplicatePChannels_Call{Call: _e.mock.On("SaveReplicatePChannels", ctx, infos)}
}

func (_c *MockReplicationCatalog_SaveReplicatePChannels_Call) Run(run func(ctx context.Context, infos []*streamingpb.ReplicatePChannelMeta)) *MockReplicationCatalog_SaveReplicatePChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*streamingpb.ReplicatePChannelMeta))
	})
	return _c
}

func (_c *MockReplicationCatalog_SaveReplicatePChannels_Call) Return(_a0 error) *MockReplicationCatalog_SaveReplicatePChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicationCatalog_SaveReplicatePChannels_Call) RunAndReturn(run func(context.Context, []*streamingpb.ReplicatePChannelMeta) error) *MockReplicationCatalog_SaveReplicatePChannels_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReplicationCatalog creates a new instance of MockReplicationCatalog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplicationCatalog(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplicationCatalog {
	mock := &MockReplicationCatalog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
