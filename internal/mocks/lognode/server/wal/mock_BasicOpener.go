// Code generated by mockery v2.32.4. DO NOT EDIT.

package mock_wal

import (
	context "context"

	wal "github.com/milvus-io/milvus/internal/lognode/server/wal"
	mock "github.com/stretchr/testify/mock"
)

// MockBasicOpener is an autogenerated mock type for the BasicOpener type
type MockBasicOpener struct {
	mock.Mock
}

type MockBasicOpener_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBasicOpener) EXPECT() *MockBasicOpener_Expecter {
	return &MockBasicOpener_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockBasicOpener) Close() {
	_m.Called()
}

// MockBasicOpener_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockBasicOpener_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockBasicOpener_Expecter) Close() *MockBasicOpener_Close_Call {
	return &MockBasicOpener_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockBasicOpener_Close_Call) Run(run func()) *MockBasicOpener_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBasicOpener_Close_Call) Return() *MockBasicOpener_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBasicOpener_Close_Call) RunAndReturn(run func()) *MockBasicOpener_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: ctx, opt
func (_m *MockBasicOpener) Open(ctx context.Context, opt *wal.BasicOpenOption) (wal.BasicWAL, error) {
	ret := _m.Called(ctx, opt)

	var r0 wal.BasicWAL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wal.BasicOpenOption) (wal.BasicWAL, error)); ok {
		return rf(ctx, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wal.BasicOpenOption) wal.BasicWAL); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wal.BasicWAL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wal.BasicOpenOption) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBasicOpener_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockBasicOpener_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - ctx context.Context
//   - opt *wal.BasicOpenOption
func (_e *MockBasicOpener_Expecter) Open(ctx interface{}, opt interface{}) *MockBasicOpener_Open_Call {
	return &MockBasicOpener_Open_Call{Call: _e.mock.On("Open", ctx, opt)}
}

func (_c *MockBasicOpener_Open_Call) Run(run func(ctx context.Context, opt *wal.BasicOpenOption)) *MockBasicOpener_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*wal.BasicOpenOption))
	})
	return _c
}

func (_c *MockBasicOpener_Open_Call) Return(_a0 wal.BasicWAL, _a1 error) *MockBasicOpener_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBasicOpener_Open_Call) RunAndReturn(run func(context.Context, *wal.BasicOpenOption) (wal.BasicWAL, error)) *MockBasicOpener_Open_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBasicOpener creates a new instance of MockBasicOpener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBasicOpener(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBasicOpener {
	mock := &MockBasicOpener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
