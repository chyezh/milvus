// Code generated by mockery v2.32.4. DO NOT EDIT.

package mock_wal

import (
	context "context"

	message "github.com/milvus-io/milvus/internal/util/logserviceutil/message"
	mock "github.com/stretchr/testify/mock"

	mqwrapper "github.com/milvus-io/milvus/pkg/mq/msgstream/mqwrapper"
)

// MockAppendInterceptorWithReady is an autogenerated mock type for the AppendInterceptorWithReady type
type MockAppendInterceptorWithReady struct {
	mock.Mock
}

type MockAppendInterceptorWithReady_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppendInterceptorWithReady) EXPECT() *MockAppendInterceptorWithReady_Expecter {
	return &MockAppendInterceptorWithReady_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockAppendInterceptorWithReady) Close() {
	_m.Called()
}

// MockAppendInterceptorWithReady_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockAppendInterceptorWithReady_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockAppendInterceptorWithReady_Expecter) Close() *MockAppendInterceptorWithReady_Close_Call {
	return &MockAppendInterceptorWithReady_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockAppendInterceptorWithReady_Close_Call) Run(run func()) *MockAppendInterceptorWithReady_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppendInterceptorWithReady_Close_Call) Return() *MockAppendInterceptorWithReady_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAppendInterceptorWithReady_Close_Call) RunAndReturn(run func()) *MockAppendInterceptorWithReady_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function with given fields: ctx, msg, append
func (_m *MockAppendInterceptorWithReady) Do(ctx context.Context, msg message.MutableMessage, append func(context.Context, message.MutableMessage) (mqwrapper.MessageID, error)) (mqwrapper.MessageID, error) {
	ret := _m.Called(ctx, msg, append)

	var r0 mqwrapper.MessageID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, message.MutableMessage, func(context.Context, message.MutableMessage) (mqwrapper.MessageID, error)) (mqwrapper.MessageID, error)); ok {
		return rf(ctx, msg, append)
	}
	if rf, ok := ret.Get(0).(func(context.Context, message.MutableMessage, func(context.Context, message.MutableMessage) (mqwrapper.MessageID, error)) mqwrapper.MessageID); ok {
		r0 = rf(ctx, msg, append)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqwrapper.MessageID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, message.MutableMessage, func(context.Context, message.MutableMessage) (mqwrapper.MessageID, error)) error); ok {
		r1 = rf(ctx, msg, append)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppendInterceptorWithReady_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockAppendInterceptorWithReady_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - msg message.MutableMessage
//   - append func(context.Context , message.MutableMessage)(mqwrapper.MessageID , error)
func (_e *MockAppendInterceptorWithReady_Expecter) Do(ctx interface{}, msg interface{}, append interface{}) *MockAppendInterceptorWithReady_Do_Call {
	return &MockAppendInterceptorWithReady_Do_Call{Call: _e.mock.On("Do", ctx, msg, append)}
}

func (_c *MockAppendInterceptorWithReady_Do_Call) Run(run func(ctx context.Context, msg message.MutableMessage, append func(context.Context, message.MutableMessage) (mqwrapper.MessageID, error))) *MockAppendInterceptorWithReady_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(message.MutableMessage), args[2].(func(context.Context, message.MutableMessage) (mqwrapper.MessageID, error)))
	})
	return _c
}

func (_c *MockAppendInterceptorWithReady_Do_Call) Return(_a0 mqwrapper.MessageID, _a1 error) *MockAppendInterceptorWithReady_Do_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppendInterceptorWithReady_Do_Call) RunAndReturn(run func(context.Context, message.MutableMessage, func(context.Context, message.MutableMessage) (mqwrapper.MessageID, error)) (mqwrapper.MessageID, error)) *MockAppendInterceptorWithReady_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with given fields:
func (_m *MockAppendInterceptorWithReady) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockAppendInterceptorWithReady_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockAppendInterceptorWithReady_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockAppendInterceptorWithReady_Expecter) Ready() *MockAppendInterceptorWithReady_Ready_Call {
	return &MockAppendInterceptorWithReady_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockAppendInterceptorWithReady_Ready_Call) Run(run func()) *MockAppendInterceptorWithReady_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppendInterceptorWithReady_Ready_Call) Return(_a0 <-chan struct{}) *MockAppendInterceptorWithReady_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppendInterceptorWithReady_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockAppendInterceptorWithReady_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppendInterceptorWithReady creates a new instance of MockAppendInterceptorWithReady. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppendInterceptorWithReady(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppendInterceptorWithReady {
	mock := &MockAppendInterceptorWithReady{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
