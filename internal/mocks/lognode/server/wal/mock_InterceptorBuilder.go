// Code generated by mockery v2.32.4. DO NOT EDIT.

package mock_wal

import (
	wal "github.com/milvus-io/milvus/internal/lognode/server/wal"
	mock "github.com/stretchr/testify/mock"
)

// MockInterceptorBuilder is an autogenerated mock type for the InterceptorBuilder type
type MockInterceptorBuilder struct {
	mock.Mock
}

type MockInterceptorBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterceptorBuilder) EXPECT() *MockInterceptorBuilder_Expecter {
	return &MockInterceptorBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: _a0
func (_m *MockInterceptorBuilder) Build(_a0 wal.BasicWAL) wal.AppendInterceptor {
	ret := _m.Called(_a0)

	var r0 wal.AppendInterceptor
	if rf, ok := ret.Get(0).(func(wal.BasicWAL) wal.AppendInterceptor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wal.AppendInterceptor)
		}
	}

	return r0
}

// MockInterceptorBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockInterceptorBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - _a0 wal.BasicWAL
func (_e *MockInterceptorBuilder_Expecter) Build(_a0 interface{}) *MockInterceptorBuilder_Build_Call {
	return &MockInterceptorBuilder_Build_Call{Call: _e.mock.On("Build", _a0)}
}

func (_c *MockInterceptorBuilder_Build_Call) Run(run func(_a0 wal.BasicWAL)) *MockInterceptorBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(wal.BasicWAL))
	})
	return _c
}

func (_c *MockInterceptorBuilder_Build_Call) Return(_a0 wal.AppendInterceptor) *MockInterceptorBuilder_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterceptorBuilder_Build_Call) RunAndReturn(run func(wal.BasicWAL) wal.AppendInterceptor) *MockInterceptorBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterceptorBuilder creates a new instance of MockInterceptorBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterceptorBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterceptorBuilder {
	mock := &MockInterceptorBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
