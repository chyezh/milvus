// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_tombstone

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCollectionTombstoneInterface is an autogenerated mock type for the CollectionTombstoneInterface type
type MockCollectionTombstoneInterface struct {
	mock.Mock
}

type MockCollectionTombstoneInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectionTombstoneInterface) EXPECT() *MockCollectionTombstoneInterface_Expecter {
	return &MockCollectionTombstoneInterface_Expecter{mock: &_m.Mock}
}

// CheckIfPartitionAvailable provides a mock function with given fields: ctx, collectionID, partitionID
func (_m *MockCollectionTombstoneInterface) CheckIfPartitionAvailable(ctx context.Context, collectionID int64, partitionID int64) bool {
	ret := _m.Called(ctx, collectionID, partitionID)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfPartitionAvailable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(ctx, collectionID, partitionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfPartitionAvailable'
type MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call struct {
	*mock.Call
}

// CheckIfPartitionAvailable is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
//   - partitionID int64
func (_e *MockCollectionTombstoneInterface_Expecter) CheckIfPartitionAvailable(ctx interface{}, collectionID interface{}, partitionID interface{}) *MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call {
	return &MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call{Call: _e.mock.On("CheckIfPartitionAvailable", ctx, collectionID, partitionID)}
}

func (_c *MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call) Run(run func(ctx context.Context, collectionID int64, partitionID int64)) *MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call) Return(_a0 bool) *MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call) RunAndReturn(run func(context.Context, int64, int64) bool) *MockCollectionTombstoneInterface_CheckIfPartitionAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// CheckIfVChannelAvailable provides a mock function with given fields: ctx, vchannel
func (_m *MockCollectionTombstoneInterface) CheckIfVChannelAvailable(ctx context.Context, vchannel string) bool {
	ret := _m.Called(ctx, vchannel)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfVChannelAvailable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, vchannel)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfVChannelAvailable'
type MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call struct {
	*mock.Call
}

// CheckIfVChannelAvailable is a helper method to define mock.On call
//   - ctx context.Context
//   - vchannel string
func (_e *MockCollectionTombstoneInterface_Expecter) CheckIfVChannelAvailable(ctx interface{}, vchannel interface{}) *MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call {
	return &MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call{Call: _e.mock.On("CheckIfVChannelAvailable", ctx, vchannel)}
}

func (_c *MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call) Run(run func(ctx context.Context, vchannel string)) *MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call) Return(_a0 bool) *MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call) RunAndReturn(run func(context.Context, string) bool) *MockCollectionTombstoneInterface_CheckIfVChannelAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollectionTombstoneInterface creates a new instance of MockCollectionTombstoneInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectionTombstoneInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectionTombstoneInterface {
	mock := &MockCollectionTombstoneInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
